import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

/**
 * Code Builder Activities for Python Fundamentals
 * 10 code construction activities where students build code from blocks
 * Difficulty levels: 1-4 (Beginner to Advanced)
 */

export const codeBuilderPythonFundamentalsActivities = [
  // DIFFICULTY 1 - BEGINNER (3 activities)

  // 1. Basic Function Construction
  {
    title: "Build Your First Python Function",
    description: "Construct a simple function using provided code blocks",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 1,
    diamondReward: 18,
    experienceReward: 40,
    estimatedMinutes: 15,
    tags: ["functions", "basics", "construction", "beginner"],
    content: {
      instructions: "Build a function that greets a user by name",
      targetOutput: "Hello, Alice! Welcome to Python!",
      availableBlocks: [
        {
          id: "def_greeting",
          code: "def greet_user(name):",
          type: "function_definition",
          description: "Function definition with parameter",
        },
        {
          id: "greeting_message",
          code: "    message = f'Hello, {name}! Welcome to Python!'",
          type: "variable_assignment",
          description: "Create greeting message using f-string",
        },
        {
          id: "return_statement",
          code: "    return message",
          type: "return",
          description: "Return the greeting message",
        },
        {
          id: "function_call",
          code: "result = greet_user('Alice')",
          type: "function_call",
          description: "Call the function with 'Alice' as argument",
        },
        {
          id: "print_result",
          code: "print(result)",
          type: "output",
          description: "Display the result",
        },
      ],
      language: "Python",
      solution: [
        "def greet_user(name):",
        "    message = f'Hello, {name}! Welcome to Python!'",
        "    return message",
        "result = greet_user('Alice')",
        "print(result)",
      ],
    },
    settings: {
      timeLimit: 600,
      codeTemplate: "# Build a greeting function\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 1,
  },

  // 2. Simple Calculator Builder
  {
    title: "Build a Simple Calculator",
    description: "Construct basic arithmetic operations using code blocks",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 1,
    diamondReward: 20,
    experienceReward: 45,
    estimatedMinutes: 18,
    tags: ["arithmetic", "calculator", "operations", "math"],
    content: {
      instructions: "Build functions for basic calculator operations",
      targetOutput:
        "Addition: 15, Subtraction: 5, Multiplication: 50, Division: 2.0",
      availableBlocks: [
        {
          id: "add_function",
          code: "def add(a, b):",
          type: "function_definition",
          description: "Addition function definition",
        },
        {
          id: "add_return",
          code: "    return a + b",
          type: "return",
          description: "Return sum of two numbers",
        },
        {
          id: "subtract_function",
          code: "def subtract(a, b):",
          type: "function_definition",
          description: "Subtraction function definition",
        },
        {
          id: "subtract_return",
          code: "    return a - b",
          type: "return",
          description: "Return difference of two numbers",
        },
        {
          id: "multiply_function",
          code: "def multiply(a, b):",
          type: "function_definition",
          description: "Multiplication function definition",
        },
        {
          id: "multiply_return",
          code: "    return a * b",
          type: "return",
          description: "Return product of two numbers",
        },
        {
          id: "divide_function",
          code: "def divide(a, b):",
          type: "function_definition",
          description: "Division function definition",
        },
        {
          id: "divide_return",
          code: "    return a / b",
          type: "return",
          description: "Return quotient of two numbers",
        },
        {
          id: "test_operations",
          code: "result1 = add(10, 5)\nresult2 = subtract(10, 5)\nresult3 = multiply(10, 5)\nresult4 = divide(10, 5)",
          type: "function_calls",
          description: "Test all calculator operations",
        },
        {
          id: "print_results",
          code: "print(f'Addition: {result1}, Subtraction: {result2}, Multiplication: {result3}, Division: {result4}')",
          type: "output",
          description: "Display all calculation results",
        },
      ],
      language: "Python",
      solution: [
        "def add(a, b):",
        "    return a + b",
        "def subtract(a, b):",
        "    return a - b",
        "def multiply(a, b):",
        "    return a * b",
        "def divide(a, b):",
        "    return a / b",
        "result1 = add(10, 5)",
        "result2 = subtract(10, 5)",
        "result3 = multiply(10, 5)",
        "result4 = divide(10, 5)",
        "print(f'Addition: {result1}, Subtraction: {result2}, Multiplication: {result3}, Division: {result4}')",
      ],
    },
    settings: {
      timeLimit: 800,
      codeTemplate: "# Build calculator functions\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 2,
  },

  // 3. List Operations Builder
  {
    title: "Build List Processing Functions",
    description: "Construct functions that perform common list operations",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 1,
    diamondReward: 22,
    experienceReward: 50,
    estimatedMinutes: 20,
    tags: ["lists", "operations", "processing", "data-structures"],
    content: {
      instructions: "Build functions to process and analyze lists",
      targetOutput: "Original: [1, 2, 3, 4, 5], Sum: 15, Average: 3.0, Max: 5",
      availableBlocks: [
        {
          id: "sum_function",
          code: "def calculate_sum(numbers):",
          type: "function_definition",
          description: "Function to calculate sum of list",
        },
        {
          id: "sum_logic",
          code: "    total = 0\n    for num in numbers:\n        total += num\n    return total",
          type: "loop_logic",
          description: "Loop through list and sum all numbers",
        },
        {
          id: "average_function",
          code: "def calculate_average(numbers):",
          type: "function_definition",
          description: "Function to calculate average of list",
        },
        {
          id: "average_logic",
          code: "    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)",
          type: "calculation",
          description: "Calculate average using built-in sum function",
        },
        {
          id: "max_function",
          code: "def find_maximum(numbers):",
          type: "function_definition",
          description: "Function to find maximum value",
        },
        {
          id: "max_logic",
          code: "    if not numbers:\n        return None\n    return max(numbers)",
          type: "calculation",
          description: "Find maximum using built-in max function",
        },
        {
          id: "test_data",
          code: "data = [1, 2, 3, 4, 5]",
          type: "data_setup",
          description: "Create test data list",
        },
        {
          id: "test_functions",
          code: "sum_result = calculate_sum(data)\navg_result = calculate_average(data)\nmax_result = find_maximum(data)",
          type: "function_calls",
          description: "Test all list processing functions",
        },
        {
          id: "display_results",
          code: "print(f'Original: {data}, Sum: {sum_result}, Average: {avg_result}, Max: {max_result}')",
          type: "output",
          description: "Display processing results",
        },
      ],
      language: "Python",
      solution: [
        "def calculate_sum(numbers):",
        "    total = 0",
        "    for num in numbers:",
        "        total += num",
        "    return total",
        "def calculate_average(numbers):",
        "    if len(numbers) == 0:",
        "        return 0",
        "    return sum(numbers) / len(numbers)",
        "def find_maximum(numbers):",
        "    if not numbers:",
        "        return None",
        "    return max(numbers)",
        "data = [1, 2, 3, 4, 5]",
        "sum_result = calculate_sum(data)",
        "avg_result = calculate_average(data)",
        "max_result = find_maximum(data)",
        "print(f'Original: {data}, Sum: {sum_result}, Average: {avg_result}, Max: {max_result}')",
      ],
    },
    settings: {
      timeLimit: 900,
      codeTemplate: "# Build list processing functions\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 3,
  },

  // DIFFICULTY 2 - BASIC (3 activities)

  // 4. Conditional Logic Builder
  {
    title: "Build Smart Decision Making Code",
    description:
      "Construct complex conditional logic using if-elif-else structures",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 2,
    diamondReward: 25,
    experienceReward: 55,
    estimatedMinutes: 22,
    tags: ["conditionals", "logic", "decision-making", "if-statements"],
    content: {
      instructions:
        "Build a grade classifier that assigns letter grades based on scores",
      targetOutput: "Score 85: Grade B, Score 95: Grade A, Score 75: Grade C",
      availableBlocks: [
        {
          id: "grade_function",
          code: "def assign_grade(score):",
          type: "function_definition",
          description: "Function to assign grades based on score",
        },
        {
          id: "grade_a",
          code: "    if score >= 90:",
          type: "condition",
          description: "Check for A grade (90 and above)",
        },
        {
          id: "return_a",
          code: "        return 'A'",
          type: "return",
          description: "Return A grade",
        },
        {
          id: "grade_b",
          code: "    elif score >= 80:",
          type: "condition",
          description: "Check for B grade (80-89)",
        },
        {
          id: "return_b",
          code: "        return 'B'",
          type: "return",
          description: "Return B grade",
        },
        {
          id: "grade_c",
          code: "    elif score >= 70:",
          type: "condition",
          description: "Check for C grade (70-79)",
        },
        {
          id: "return_c",
          code: "        return 'C'",
          type: "return",
          description: "Return C grade",
        },
        {
          id: "grade_d",
          code: "    elif score >= 60:",
          type: "condition",
          description: "Check for D grade (60-69)",
        },
        {
          id: "return_d",
          code: "        return 'D'",
          type: "return",
          description: "Return D grade",
        },
        {
          id: "grade_f",
          code: "    else:",
          type: "condition",
          description: "Default case for failing grade",
        },
        {
          id: "return_f",
          code: "        return 'F'",
          type: "return",
          description: "Return F grade",
        },
        {
          id: "test_scores",
          code: "scores = [85, 95, 75]\nresults = []",
          type: "data_setup",
          description: "Create test scores and results list",
        },
        {
          id: "process_scores",
          code: "for score in scores:\n    grade = assign_grade(score)\n    results.append(f'Score {score}: Grade {grade}')",
          type: "loop_processing",
          description: "Process each score and collect results",
        },
        {
          id: "display_results",
          code: "print(', '.join(results))",
          type: "output",
          description: "Display all grade assignments",
        },
      ],
      language: "Python",
      solution: [
        "def assign_grade(score):",
        "    if score >= 90:",
        "        return 'A'",
        "    elif score >= 80:",
        "        return 'B'",
        "    elif score >= 70:",
        "        return 'C'",
        "    elif score >= 60:",
        "        return 'D'",
        "    else:",
        "        return 'F'",
        "scores = [85, 95, 75]",
        "results = []",
        "for score in scores:",
        "    grade = assign_grade(score)",
        "    results.append(f'Score {score}: Grade {grade}')",
        "print(', '.join(results))",
      ],
    },
    settings: {
      timeLimit: 1000,
      codeTemplate: "# Build grade classification system\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 4,
  },

  // 5. Loop Structures Builder
  {
    title: "Build Advanced Loop Structures",
    description:
      "Construct complex loops with break, continue, and nested iterations",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 2,
    diamondReward: 28,
    experienceReward: 60,
    estimatedMinutes: 25,
    tags: ["loops", "iteration", "control-flow", "nested-loops"],
    content: {
      instructions: "Build a number pattern generator with loop control",
      targetOutput: "Pattern: 1 3 5 7 9, Even numbers found: 2, 4, 6, 8",
      availableBlocks: [
        {
          id: "pattern_function",
          code: "def generate_pattern():",
          type: "function_definition",
          description: "Function to generate number patterns",
        },
        {
          id: "odd_numbers",
          code: "    odd_nums = []\n    for i in range(1, 11):\n        if i % 2 == 1:\n            odd_nums.append(i)",
          type: "loop_logic",
          description: "Collect odd numbers from 1 to 10",
        },
        {
          id: "return_odds",
          code: "    return odd_nums",
          type: "return",
          description: "Return list of odd numbers",
        },
        {
          id: "even_function",
          code: "def find_even_numbers():",
          type: "function_definition",
          description: "Function to find even numbers",
        },
        {
          id: "even_collection",
          code: "    even_nums = []\n    i = 1\n    while i <= 10:\n        if i % 2 == 0:\n            even_nums.append(i)\n        i += 1",
          type: "while_loop",
          description: "Use while loop to find even numbers",
        },
        {
          id: "return_evens",
          code: "    return even_nums",
          type: "return",
          description: "Return list of even numbers",
        },
        {
          id: "call_functions",
          code: "odd_pattern = generate_pattern()\neven_numbers = find_even_numbers()",
          type: "function_calls",
          description: "Call both pattern generation functions",
        },
        {
          id: "format_odds",
          code: "pattern_str = ' '.join(map(str, odd_pattern))",
          type: "string_formatting",
          description: "Format odd numbers as space-separated string",
        },
        {
          id: "format_evens",
          code: "evens_str = ', '.join(map(str, even_numbers))",
          type: "string_formatting",
          description: "Format even numbers as comma-separated string",
        },
        {
          id: "display_output",
          code: "print(f'Pattern: {pattern_str}, Even numbers found: {evens_str}')",
          type: "output",
          description: "Display both patterns",
        },
      ],
      language: "Python",
      solution: [
        "def generate_pattern():",
        "    odd_nums = []",
        "    for i in range(1, 11):",
        "        if i % 2 == 1:",
        "            odd_nums.append(i)",
        "    return odd_nums",
        "def find_even_numbers():",
        "    even_nums = []",
        "    i = 1",
        "    while i <= 10:",
        "        if i % 2 == 0:",
        "            even_nums.append(i)",
        "        i += 1",
        "    return even_nums",
        "odd_pattern = generate_pattern()",
        "even_numbers = find_even_numbers()",
        "pattern_str = ' '.join(map(str, odd_pattern))",
        "evens_str = ', '.join(map(str, even_numbers))",
        "print(f'Pattern: {pattern_str}, Even numbers found: {evens_str}')",
      ],
    },
    settings: {
      timeLimit: 1200,
      codeTemplate: "# Build pattern generation system\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 5,
  },

  // 6. Dictionary Operations Builder
  {
    title: "Build Dictionary Data Processor",
    description:
      "Construct advanced dictionary operations and data manipulation",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 2,
    diamondReward: 30,
    experienceReward: 65,
    estimatedMinutes: 28,
    tags: ["dictionaries", "data-processing", "key-value", "manipulation"],
    content: {
      instructions:
        "Build a student grade management system using dictionaries",
      targetOutput: "Students: 3, Average GPA: 3.3, Top student: Bob (3.8)",
      availableBlocks: [
        {
          id: "grade_processor",
          code: "def process_student_data(students):",
          type: "function_definition",
          description: "Main function to process student data",
        },
        {
          id: "calculate_gpa",
          code: "    for student in students:\n        grades = student['grades']\n        gpa = sum(grades) / len(grades)\n        student['gpa'] = round(gpa, 1)",
          type: "loop_processing",
          description: "Calculate GPA for each student",
        },
        {
          id: "return_students",
          code: "    return students",
          type: "return",
          description: "Return processed student data",
        },
        {
          id: "find_top_student",
          code: "def find_top_student(students):",
          type: "function_definition",
          description: "Function to find highest GPA student",
        },
        {
          id: "top_logic",
          code: "    top_student = max(students, key=lambda x: x['gpa'])\n    return top_student",
          type: "calculation",
          description: "Find student with maximum GPA",
        },
        {
          id: "calculate_avg_gpa",
          code: "def calculate_average_gpa(students):",
          type: "function_definition",
          description: "Function to calculate average GPA",
        },
        {
          id: "avg_logic",
          code: "    total_gpa = sum(student['gpa'] for student in students)\n    return round(total_gpa / len(students), 1)",
          type: "calculation",
          description: "Calculate overall average GPA",
        },
        {
          id: "sample_data",
          code: "students_data = [\n    {'name': 'Alice', 'grades': [3.5, 4.0, 3.8]},\n    {'name': 'Bob', 'grades': [4.0, 3.9, 3.5]},\n    {'name': 'Charlie', 'grades': [2.8, 3.2, 3.0]}\n]",
          type: "data_setup",
          description: "Create sample student data",
        },
        {
          id: "process_data",
          code: "processed_students = process_student_data(students_data)\ntop_student = find_top_student(processed_students)\navg_gpa = calculate_average_gpa(processed_students)",
          type: "function_calls",
          description: "Process data and calculate statistics",
        },
        {
          id: "display_summary",
          code: 'print(f\'Students: {len(processed_students)}, Average GPA: {avg_gpa}, Top student: {top_student["name"]} ({top_student["gpa"]})\')',
          type: "output",
          description: "Display summary statistics",
        },
      ],
      language: "Python",
      solution: [
        "def process_student_data(students):",
        "    for student in students:",
        "        grades = student['grades']",
        "        gpa = sum(grades) / len(grades)",
        "        student['gpa'] = round(gpa, 1)",
        "    return students",
        "def find_top_student(students):",
        "    top_student = max(students, key=lambda x: x['gpa'])",
        "    return top_student",
        "def calculate_average_gpa(students):",
        "    total_gpa = sum(student['gpa'] for student in students)",
        "    return round(total_gpa / len(students), 1)",
        "students_data = [",
        "    {'name': 'Alice', 'grades': [3.5, 4.0, 3.8]},",
        "    {'name': 'Bob', 'grades': [4.0, 3.9, 3.5]},",
        "    {'name': 'Charlie', 'grades': [2.8, 3.2, 3.0]}",
        "]",
        "processed_students = process_student_data(students_data)",
        "top_student = find_top_student(processed_students)",
        "avg_gpa = calculate_average_gpa(processed_students)",
        'print(f\'Students: {len(processed_students)}, Average GPA: {avg_gpa}, Top student: {top_student["name"]} ({top_student["gpa"]})\')',
      ],
    },
    settings: {
      timeLimit: 1400,
      codeTemplate: "# Build student grade management system\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 6,
  },

  // DIFFICULTY 3 - INTERMEDIATE (2 activities)

  // 7. Error Handling Builder
  {
    title: "Build Robust Error Handling System",
    description:
      "Construct comprehensive error handling with try-except-finally blocks",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 3,
    diamondReward: 32,
    experienceReward: 70,
    estimatedMinutes: 30,
    tags: ["error-handling", "exceptions", "try-except", "robust-code"],
    content: {
      instructions: "Build a file processor with comprehensive error handling",
      targetOutput: "Processing complete. Valid numbers: 3, Errors handled: 2",
      availableBlocks: [
        {
          id: "safe_processor",
          code: "def safe_number_processor(data_list):",
          type: "function_definition",
          description: "Main function with error handling",
        },
        {
          id: "init_vars",
          code: "    results = []\n    error_count = 0",
          type: "variable_initialization",
          description: "Initialize result storage and error counter",
        },
        {
          id: "main_loop",
          code: "    for item in data_list:",
          type: "loop_start",
          description: "Iterate through input data",
        },
        {
          id: "try_block",
          code: "        try:",
          type: "error_handling",
          description: "Start try block for error-prone operations",
        },
        {
          id: "convert_number",
          code: "            number = float(item)",
          type: "conversion",
          description: "Attempt to convert item to float",
        },
        {
          id: "validate_number",
          code: "            if number < 0:\n                raise ValueError('Negative numbers not allowed')",
          type: "validation",
          description: "Validate number is not negative",
        },
        {
          id: "process_number",
          code: "            result = number ** 2\n            results.append(result)",
          type: "processing",
          description: "Process valid number and store result",
        },
        {
          id: "value_error",
          code: "        except ValueError as e:",
          type: "error_handling",
          description: "Handle value conversion errors",
        },
        {
          id: "handle_value_error",
          code: "            print(f'Value error with {item}: {e}')\n            error_count += 1",
          type: "error_response",
          description: "Log value error and increment counter",
        },
        {
          id: "type_error",
          code: "        except TypeError as e:",
          type: "error_handling",
          description: "Handle type-related errors",
        },
        {
          id: "handle_type_error",
          code: "            print(f'Type error with {item}: {e}')\n            error_count += 1",
          type: "error_response",
          description: "Log type error and increment counter",
        },
        {
          id: "finally_block",
          code: "        finally:",
          type: "error_handling",
          description: "Finally block for cleanup",
        },
        {
          id: "cleanup",
          code: "            pass  # Cleanup operations would go here",
          type: "cleanup",
          description: "Placeholder for cleanup operations",
        },
        {
          id: "return_results",
          code: "    return results, error_count",
          type: "return",
          description: "Return processed results and error count",
        },
        {
          id: "test_data",
          code: "test_data = ['10', '20', 'invalid', '-5', '30']",
          type: "data_setup",
          description: "Create test data with valid and invalid items",
        },
        {
          id: "call_processor",
          code: "valid_results, errors = safe_number_processor(test_data)",
          type: "function_call",
          description: "Call the processor function",
        },
        {
          id: "display_summary",
          code: "print(f'Processing complete. Valid numbers: {len(valid_results)}, Errors handled: {errors}')",
          type: "output",
          description: "Display processing summary",
        },
      ],
      language: "Python",
      solution: [
        "def safe_number_processor(data_list):",
        "    results = []",
        "    error_count = 0",
        "    for item in data_list:",
        "        try:",
        "            number = float(item)",
        "            if number < 0:",
        "                raise ValueError('Negative numbers not allowed')",
        "            result = number ** 2",
        "            results.append(result)",
        "        except ValueError as e:",
        "            print(f'Value error with {item}: {e}')",
        "            error_count += 1",
        "        except TypeError as e:",
        "            print(f'Type error with {item}: {e}')",
        "            error_count += 1",
        "        finally:",
        "            pass  # Cleanup operations would go here",
        "    return results, error_count",
        "test_data = ['10', '20', 'invalid', '-5', '30']",
        "valid_results, errors = safe_number_processor(test_data)",
        "print(f'Processing complete. Valid numbers: {len(valid_results)}, Errors handled: {errors}')",
      ],
    },
    settings: {
      timeLimit: 1600,
      codeTemplate: "# Build robust error handling system\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 7,
  },

  // 8. Class Structure Builder
  {
    title: "Build Object-Oriented Class System",
    description:
      "Construct a complete class with methods, properties, and inheritance",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 3,
    diamondReward: 35,
    experienceReward: 75,
    estimatedMinutes: 32,
    tags: ["oop", "classes", "methods", "inheritance"],
    content: {
      instructions: "Build a vehicle class hierarchy with inheritance",
      targetOutput:
        "Created Toyota Camry (Car) - Speed: 0, Started Honda Civic - Speed: 50",
      availableBlocks: [
        {
          id: "base_class",
          code: "class Vehicle:",
          type: "class_definition",
          description: "Base vehicle class definition",
        },
        {
          id: "init_method",
          code: "    def __init__(self, make, model):",
          type: "constructor",
          description: "Constructor for vehicle",
        },
        {
          id: "init_body",
          code: "        self.make = make\n        self.model = model\n        self.speed = 0",
          type: "initialization",
          description: "Initialize vehicle attributes",
        },
        {
          id: "start_method",
          code: "    def start(self):",
          type: "method_definition",
          description: "Method to start vehicle",
        },
        {
          id: "start_body",
          code: "        print(f'Started {self.make} {self.model}')",
          type: "method_body",
          description: "Start method implementation",
        },
        {
          id: "accelerate_method",
          code: "    def accelerate(self, amount):",
          type: "method_definition",
          description: "Method to accelerate vehicle",
        },
        {
          id: "accelerate_body",
          code: "        self.speed += amount\n        print(f'Speed now: {self.speed}')",
          type: "method_body",
          description: "Accelerate method implementation",
        },
        {
          id: "car_class",
          code: "class Car(Vehicle):",
          type: "inheritance",
          description: "Car class inheriting from Vehicle",
        },
        {
          id: "car_init",
          code: "    def __init__(self, make, model, doors):",
          type: "constructor",
          description: "Car constructor with additional parameter",
        },
        {
          id: "car_init_body",
          code: "        super().__init__(make, model)\n        self.doors = doors",
          type: "initialization",
          description: "Call parent constructor and set doors",
        },
        {
          id: "car_info",
          code: "    def get_info(self):",
          type: "method_definition",
          description: "Method to get car information",
        },
        {
          id: "car_info_body",
          code: "        return f'{self.make} {self.model} (Car) - Speed: {self.speed}'",
          type: "method_body",
          description: "Return formatted car information",
        },
        {
          id: "create_vehicles",
          code: "car1 = Car('Toyota', 'Camry', 4)\ncar2 = Car('Honda', 'Civic', 4)",
          type: "object_creation",
          description: "Create car instances",
        },
        {
          id: "test_vehicles",
          code: "print(car1.get_info())\ncar2.start()\ncar2.accelerate(50)",
          type: "method_calls",
          description: "Test vehicle methods",
        },
      ],
      language: "Python",
      solution: [
        "class Vehicle:",
        "    def __init__(self, make, model):",
        "        self.make = make",
        "        self.model = model",
        "        self.speed = 0",
        "    def start(self):",
        "        print(f'Started {self.make} {self.model}')",
        "    def accelerate(self, amount):",
        "        self.speed += amount",
        "        print(f'Speed now: {self.speed}')",
        "class Car(Vehicle):",
        "    def __init__(self, make, model, doors):",
        "        super().__init__(make, model)",
        "        self.doors = doors",
        "    def get_info(self):",
        "        return f'{self.make} {self.model} (Car) - Speed: {self.speed}'",
        "car1 = Car('Toyota', 'Camry', 4)",
        "car2 = Car('Honda', 'Civic', 4)",
        "print(car1.get_info())",
        "car2.start()",
        "car2.accelerate(50)",
      ],
    },
    settings: {
      timeLimit: 1800,
      codeTemplate: "# Build vehicle class hierarchy\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 8,
  },

  // DIFFICULTY 4 - ADVANCED (2 activities)

  // 9. Advanced Data Processing Pipeline
  {
    title: "Build Advanced Data Processing Pipeline",
    description:
      "Construct a sophisticated data pipeline with multiple processing stages",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 4,
    diamondReward: 38,
    experienceReward: 80,
    estimatedMinutes: 35,
    tags: ["data-pipeline", "advanced", "processing", "algorithms"],
    content: {
      instructions:
        "Build a multi-stage data processing pipeline with filtering, transformation, and aggregation",
      targetOutput:
        "Pipeline complete: 15 records processed, 12 valid, average score: 78.3",
      availableBlocks: [
        {
          id: "pipeline_class",
          code: "class DataPipeline:",
          type: "class_definition",
          description: "Main pipeline class",
        },
        {
          id: "pipeline_init",
          code: "    def __init__(self):\n        self.stages = []\n        self.processed_count = 0",
          type: "initialization",
          description: "Initialize pipeline with stages and counters",
        },
        {
          id: "add_stage",
          code: "    def add_stage(self, stage_func):\n        self.stages.append(stage_func)",
          type: "method_definition",
          description: "Add processing stage to pipeline",
        },
        {
          id: "process_method",
          code: "    def process(self, data):",
          type: "method_definition",
          description: "Main processing method",
        },
        {
          id: "process_loop",
          code: "        result = data\n        for stage in self.stages:\n            result = stage(result)\n        self.processed_count = len(result)\n        return result",
          type: "processing_logic",
          description: "Apply all stages sequentially to data",
        },
        {
          id: "filter_stage",
          code: "def filter_valid_records(data):\n    return [record for record in data if record.get('valid', True)]",
          type: "filter_function",
          description: "Filter out invalid records",
        },
        {
          id: "transform_stage",
          code: "def normalize_scores(data):\n    for record in data:\n        if 'score' in record:\n            record['normalized_score'] = min(100, max(0, record['score']))\n    return data",
          type: "transform_function",
          description: "Normalize scores to 0-100 range",
        },
        {
          id: "enrichment_stage",
          code: "def add_grade_category(data):\n    for record in data:\n        score = record.get('normalized_score', 0)\n        if score >= 90: record['category'] = 'Excellent'\n        elif score >= 80: record['category'] = 'Good'\n        elif score >= 70: record['category'] = 'Average'\n        else: record['category'] = 'Needs Improvement'\n    return data",
          type: "enrichment_function",
          description: "Add grade categories based on scores",
        },
        {
          id: "analytics_function",
          code: "def calculate_analytics(processed_data):\n    if not processed_data:\n        return {'count': 0, 'average': 0}\n    \n    total_score = sum(record.get('normalized_score', 0) for record in processed_data)\n    average_score = total_score / len(processed_data)\n    \n    return {\n        'count': len(processed_data),\n        'average': round(average_score, 1)\n    }",
          type: "analytics_function",
          description: "Calculate summary statistics",
        },
        {
          id: "sample_data",
          code: "sample_data = [\n    {'id': 1, 'name': 'Alice', 'score': 85, 'valid': True},\n    {'id': 2, 'name': 'Bob', 'score': 92, 'valid': True},\n    {'id': 3, 'name': 'Charlie', 'score': 67, 'valid': False},\n    {'id': 4, 'name': 'Diana', 'score': 78, 'valid': True},\n    {'id': 5, 'name': 'Eve', 'score': 95, 'valid': True}\n]",
          type: "data_setup",
          description: "Create sample dataset",
        },
        {
          id: "setup_pipeline",
          code: "pipeline = DataPipeline()\npipeline.add_stage(filter_valid_records)\npipeline.add_stage(normalize_scores)\npipeline.add_stage(add_grade_category)",
          type: "pipeline_setup",
          description: "Create and configure pipeline",
        },
        {
          id: "run_pipeline",
          code: "processed_data = pipeline.process(sample_data)\nanalytics = calculate_analytics(processed_data)\noriginal_count = len(sample_data)",
          type: "execution",
          description: "Run pipeline and calculate analytics",
        },
        {
          id: "display_results",
          code: 'print(f\'Pipeline complete: {original_count} records processed, {analytics["count"]} valid, average score: {analytics["average"]}\')',
          type: "output",
          description: "Display pipeline results",
        },
      ],
      language: "Python",
      solution: [
        "class DataPipeline:",
        "    def __init__(self):",
        "        self.stages = []",
        "        self.processed_count = 0",
        "    def add_stage(self, stage_func):",
        "        self.stages.append(stage_func)",
        "    def process(self, data):",
        "        result = data",
        "        for stage in self.stages:",
        "            result = stage(result)",
        "        self.processed_count = len(result)",
        "        return result",
        "def filter_valid_records(data):",
        "    return [record for record in data if record.get('valid', True)]",
        "def normalize_scores(data):",
        "    for record in data:",
        "        if 'score' in record:",
        "            record['normalized_score'] = min(100, max(0, record['score']))",
        "    return data",
        "def add_grade_category(data):",
        "    for record in data:",
        "        score = record.get('normalized_score', 0)",
        "        if score >= 90: record['category'] = 'Excellent'",
        "        elif score >= 80: record['category'] = 'Good'",
        "        elif score >= 70: record['category'] = 'Average'",
        "        else: record['category'] = 'Needs Improvement'",
        "    return data",
        "def calculate_analytics(processed_data):",
        "    if not processed_data:",
        "        return {'count': 0, 'average': 0}",
        "    total_score = sum(record.get('normalized_score', 0) for record in processed_data)",
        "    average_score = total_score / len(processed_data)",
        "    return {'count': len(processed_data), 'average': round(average_score, 1)}",
        "sample_data = [",
        "    {'id': 1, 'name': 'Alice', 'score': 85, 'valid': True},",
        "    {'id': 2, 'name': 'Bob', 'score': 92, 'valid': True},",
        "    {'id': 3, 'name': 'Charlie', 'score': 67, 'valid': False},",
        "    {'id': 4, 'name': 'Diana', 'score': 78, 'valid': True},",
        "    {'id': 5, 'name': 'Eve', 'score': 95, 'valid': True}",
        "]",
        "pipeline = DataPipeline()",
        "pipeline.add_stage(filter_valid_records)",
        "pipeline.add_stage(normalize_scores)",
        "pipeline.add_stage(add_grade_category)",
        "processed_data = pipeline.process(sample_data)",
        "analytics = calculate_analytics(processed_data)",
        "original_count = len(sample_data)",
        'print(f\'Pipeline complete: {original_count} records processed, {analytics["count"]} valid, average score: {analytics["average"]}\')',
      ],
    },
    settings: {
      timeLimit: 2000,
      codeTemplate:
        "# Build advanced data processing pipeline\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 9,
  },

  // 10. Complete Application Builder
  {
    title: "Build Complete Mini Application",
    description:
      "Construct a complete mini-application with multiple components working together",
    activityType: "code_builder",
    category: "Python Fundamentals",
    difficulty: 4,
    diamondReward: 42,
    experienceReward: 85,
    estimatedMinutes: 40,
    tags: ["application", "complete-system", "integration", "project"],
    content: {
      instructions:
        "Build a complete task management application with all CRUD operations",
      targetOutput:
        "Task Manager: 3 tasks, 1 completed, 2 pending, Next due: Task 2",
      availableBlocks: [
        {
          id: "task_class",
          code: "class Task:\n    def __init__(self, task_id, title, description, due_date=None):\n        self.task_id = task_id\n        self.title = title\n        self.description = description\n        self.due_date = due_date\n        self.completed = False\n        self.created_at = 'Today'",
          type: "class_definition",
          description: "Task data model class",
        },
        {
          id: "task_methods",
          code: "    def mark_complete(self):\n        self.completed = True\n    \n    def __str__(self):\n        status = 'Completed' if self.completed else 'Pending'\n        return f'Task {self.task_id}: {self.title} ({status})'",
          type: "class_methods",
          description: "Task methods for completion and display",
        },
        {
          id: "manager_class",
          code: "class TaskManager:\n    def __init__(self):\n        self.tasks = {}\n        self.next_id = 1",
          type: "manager_class",
          description: "Task manager class initialization",
        },
        {
          id: "add_task_method",
          code: "    def add_task(self, title, description, due_date=None):\n        task = Task(self.next_id, title, description, due_date)\n        self.tasks[self.next_id] = task\n        self.next_id += 1\n        return task.task_id",
          type: "crud_method",
          description: "Add new task to manager",
        },
        {
          id: "complete_task_method",
          code: "    def complete_task(self, task_id):\n        if task_id in self.tasks:\n            self.tasks[task_id].mark_complete()\n            return True\n        return False",
          type: "crud_method",
          description: "Mark task as completed",
        },
        {
          id: "get_stats_method",
          code: "    def get_statistics(self):\n        total = len(self.tasks)\n        completed = sum(1 for task in self.tasks.values() if task.completed)\n        pending = total - completed\n        return {'total': total, 'completed': completed, 'pending': pending}",
          type: "analytics_method",
          description: "Calculate task statistics",
        },
        {
          id: "get_next_due_method",
          code: "    def get_next_due_task(self):\n        pending_tasks = [task for task in self.tasks.values() if not task.completed and task.due_date]\n        if pending_tasks:\n            return min(pending_tasks, key=lambda t: t.due_date)\n        return None",
          type: "query_method",
          description: "Find next task due",
        },
        {
          id: "list_tasks_method",
          code: "    def list_all_tasks(self):\n        return list(self.tasks.values())",
          type: "query_method",
          description: "Get all tasks",
        },
        {
          id: "app_function",
          code: "def run_task_app():\n    manager = TaskManager()\n    \n    # Add sample tasks\n    manager.add_task('Learn Python', 'Complete Python fundamentals course', '2024-02-01')\n    manager.add_task('Build Project', 'Create a Python project', '2024-01-25')\n    manager.add_task('Write Tests', 'Add unit tests', '2024-02-05')\n    \n    # Complete one task\n    manager.complete_task(1)\n    \n    return manager",
          type: "application_logic",
          description: "Main application function",
        },
        {
          id: "run_demo",
          code: "task_manager = run_task_app()\nstats = task_manager.get_statistics()\nnext_task = task_manager.get_next_due_task()",
          type: "execution",
          description: "Run the application demo",
        },
        {
          id: "display_summary",
          code: "next_due_info = f'Task {next_task.task_id}' if next_task else 'None'\nprint(f'Task Manager: {stats[\"total\"]} tasks, {stats[\"completed\"]} completed, {stats[\"pending\"]} pending, Next due: {next_due_info}')",
          type: "output",
          description: "Display application summary",
        },
      ],
      language: "Python",
      solution: [
        "class Task:",
        "    def __init__(self, task_id, title, description, due_date=None):",
        "        self.task_id = task_id",
        "        self.title = title",
        "        self.description = description",
        "        self.due_date = due_date",
        "        self.completed = False",
        "        self.created_at = 'Today'",
        "    def mark_complete(self):",
        "        self.completed = True",
        "    def __str__(self):",
        "        status = 'Completed' if self.completed else 'Pending'",
        "        return f'Task {self.task_id}: {self.title} ({status})'",
        "class TaskManager:",
        "    def __init__(self):",
        "        self.tasks = {}",
        "        self.next_id = 1",
        "    def add_task(self, title, description, due_date=None):",
        "        task = Task(self.next_id, title, description, due_date)",
        "        self.tasks[self.next_id] = task",
        "        self.next_id += 1",
        "        return task.task_id",
        "    def complete_task(self, task_id):",
        "        if task_id in self.tasks:",
        "            self.tasks[task_id].mark_complete()",
        "            return True",
        "        return False",
        "    def get_statistics(self):",
        "        total = len(self.tasks)",
        "        completed = sum(1 for task in self.tasks.values() if task.completed)",
        "        pending = total - completed",
        "        return {'total': total, 'completed': completed, 'pending': pending}",
        "    def get_next_due_task(self):",
        "        pending_tasks = [task for task in self.tasks.values() if not task.completed and task.due_date]",
        "        if pending_tasks:",
        "            return min(pending_tasks, key=lambda t: t.due_date)",
        "        return None",
        "    def list_all_tasks(self):",
        "        return list(self.tasks.values())",
        "def run_task_app():",
        "    manager = TaskManager()",
        "    manager.add_task('Learn Python', 'Complete Python fundamentals course', '2024-02-01')",
        "    manager.add_task('Build Project', 'Create a Python project', '2024-01-25')",
        "    manager.add_task('Write Tests', 'Add unit tests', '2024-02-05')",
        "    manager.complete_task(1)",
        "    return manager",
        "task_manager = run_task_app()",
        "stats = task_manager.get_statistics()",
        "next_task = task_manager.get_next_due_task()",
        "next_due_info = f'Task {next_task.task_id}' if next_task else 'None'",
        'print(f\'Task Manager: {stats["total"]} tasks, {stats["completed"]} completed, {stats["pending"]} pending, Next due: {next_due_info}\')',
      ],
    },
    settings: {
      timeLimit: 2400,
      codeTemplate:
        "# Build complete task management application\n# Your code here",
      runTests: true,
      showOutput: true,
    },
    isActive: true,
    sortOrder: 10,
  },
];

export async function seedCodeBuilderPythonFundamentalsActivities() {
  console.log("🔧 Seeding Code Builder Python Fundamentals activities...");

  if (codeBuilderPythonFundamentalsActivities.length === 0) {
    console.log("📝 No Code Builder Python Fundamentals activities to seed");
    return;
  }

  for (const activity of codeBuilderPythonFundamentalsActivities) {
    await prisma.learningActivity.create({
      data: {
        title: activity.title,
        description: activity.description,
        activityType: activity.activityType,
        category: activity.category,
        difficulty: activity.difficulty,
        diamondReward: activity.diamondReward,
        experienceReward: activity.experienceReward,
        estimatedMinutes: activity.estimatedMinutes,
        content: JSON.stringify(activity.content),
        tags: JSON.stringify(activity.tags),
        isActive: activity.isActive,
        sortOrder: activity.sortOrder,
      },
    });
  }

  console.log(
    `✅ ${codeBuilderPythonFundamentalsActivities.length} Code Builder Python Fundamentals activities seeded successfully`
  );
}

// Execute the seeding function if this file is run directly
if (require.main === module) {
  seedCodeBuilderPythonFundamentalsActivities()
    .catch((error) => {
      console.error(
        "❌ Error seeding Code Builder Python Fundamentals activities:",
        error
      );
      process.exit(1);
    })
    .finally(async () => {
      await prisma.$disconnect();
    });
}
