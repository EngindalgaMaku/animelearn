[
  {
    "title": "What Can You Do with Python? 2025 Comprehensive Guide",
    "slug": "what-can-you-do-with-python-2024-guide",
    "description": "Discover Python programming language's application areas. Learn Python's power from web development to artificial intelligence, from data analysis to game development.",
    "excerpt": null,
    "content": "\r\n# What Can You Do with Python? 2025 Comprehensive Guide\r\n\r\nPython is one of today's most popular and versatile programming languages. Thanks to its simple syntax and powerful libraries, it is preferred by both beginners and experienced developers. So what can you actually do with Python?\r\n\r\n## üåê Web Development\r\n\r\nPython offers powerful solutions in web development:\r\n\r\n### Backend Development\r\n```python\r\n# Simple web application with Django\r\nfrom django.http import HttpResponse\r\nfrom django.shortcuts import render\r\n\r\ndef homepage(request):\r\n    return render(request, 'index.html', {\r\n        'title': 'Web Development with Python',\r\n        'message': 'Welcome!'\r\n    })\r\n```\r\n\r\n**Popular Frameworks:**\r\n- **Django**: Large-scale web applications\r\n- **Flask**: Micro web framework\r\n- **FastAPI**: Modern, fast API development\r\n- **Pyramid**: Flexible web framework\r\n\r\n### Real World Examples\r\n- **Instagram**: Developed using Django\r\n- **Pinterest**: Web backend written in Python\r\n- **Spotify**: Music recommendations with Python algorithms\r\n- **YouTube**: Video processing systems\r\n\r\n## ü§ñ Artificial Intelligence and Machine Learning\r\n\r\nPython is the indispensable language of the AI/ML field:\r\n\r\n### Machine Learning Example\r\n```python\r\nimport pandas as pd\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.metrics import mean_squared_error\r\n\r\n# Data loading and model training\r\ndata = pd.read_csv('house_prices.csv')\r\nX = data[['square_meters', 'room_count', 'age']]\r\ny = data['price']\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\r\n\r\nmodel = LinearRegression()\r\nmodel.fit(X_train, y_train)\r\n\r\n# Making predictions\r\nprediction = model.predict(X_test)\r\nerror = mean_squared_error(y_test, prediction)\r\nprint(f\"Model error: {error}\")\r\n```\r\n\r\n**Application Areas:**\r\n- **Image Processing**: OpenCV, PIL\r\n- **Natural Language Processing**: NLTK, spaCy\r\n- **Deep Learning**: TensorFlow, PyTorch\r\n- **Data Mining**: scikit-learn, pandas\r\n\r\n### AI Project Examples\r\n1. **Chatbot Development**\r\n2. **Face Recognition Systems**\r\n3. **Sentiment Analysis**\r\n4. **Recommendation Systems**\r\n5. **Voice Recognition Applications**\r\n\r\n## üìä Data Analysis and Science\r\n\r\nPython is the most preferred language by data scientists:\r\n\r\n### Data Analysis Example\r\n```python\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\n\r\n# Analyzing sales data\r\nsales_data = pd.read_csv('sales_data.csv')\r\n\r\n# Basic statistics\r\nprint(sales_data.describe())\r\n\r\n# Monthly sales trend\r\nsales_data['date'] = pd.to_datetime(sales_data['date'])\r\nmonthly_sales = sales_data.groupby(sales_data['date'].dt.month)['amount'].sum()\r\n\r\n# Visualization\r\nplt.figure(figsize=(12, 6))\r\nmonthly_sales.plot(kind='bar')\r\nplt.title('Monthly Sales Trends')\r\nplt.xlabel('Month')\r\nplt.ylabel('Sales Amount')\r\nplt.show()\r\n```\r\n\r\n**Used Libraries:**\r\n- **Pandas**: Data manipulation\r\n- **NumPy**: Numerical computations\r\n- **Matplotlib/Seaborn**: Data visualization\r\n- **Jupyter Notebook**: Interactive analysis\r\n\r\n## üéÆ Game Development\r\n\r\nYou can develop simple but fun games with Python:\r\n\r\n### Simple Snake Game\r\n```python\r\nimport pygame\r\nimport random\r\n\r\n# Initialize Pygame\r\npygame.init()\r\n\r\n# Game settings\r\nWIDTH, HEIGHT = 800, 600\r\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\r\npygame.display.set_caption(\"Snake Game\")\r\n\r\n# Colors\r\nBLACK = (0, 0, 0)\r\nGREEN = (0, 255, 0)\r\nRED = (255, 0, 0)\r\n\r\n# Game loop\r\ndef game_loop():\r\n    clock = pygame.time.Clock()\r\n    running = True\r\n    \r\n    while running:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n        \r\n        screen.fill(BLACK)\r\n        # Game logic goes here...\r\n        \r\n        pygame.display.flip()\r\n        clock.tick(60)\r\n    \r\n    pygame.quit()\r\n\r\ngame_loop()\r\n```\r\n\r\n**Game Development Tools:**\r\n- **Pygame**: 2D game development\r\n- **Panda3D**: 3D game engine\r\n- **Arcade**: Modern Python game library\r\n\r\n## üîß Automation and Scripting\r\n\r\nPython is perfect for automating repetitive tasks:\r\n\r\n### File Organization Script\r\n```python\r\nimport os\r\nimport shutil\r\nfrom pathlib import Path\r\n\r\ndef organize_files(folder_path):\r\n    \"\"\"Organizes files by their extensions\"\"\"\r\n    \r\n    extension_folders = {\r\n        '.jpg': 'Images',\r\n        '.png': 'Images',\r\n        '.pdf': 'Documents',\r\n        '.docx': 'Documents',\r\n        '.mp3': 'Music',\r\n        '.mp4': 'Videos'\r\n    }\r\n    \r\n    for file in os.listdir(folder_path):\r\n        file_path = os.path.join(folder_path, file)\r\n        \r\n        if os.path.isfile(file_path):\r\n            extension = Path(file).suffix.lower()\r\n            \r\n            if extension in extension_folders:\r\n                target_folder = os.path.join(folder_path, extension_folders[extension])\r\n                \r\n                # Create folder if it doesn't exist\r\n                os.makedirs(target_folder, exist_ok=True)\r\n                \r\n                # Move file\r\n                shutil.move(file_path, os.path.join(target_folder, file))\r\n                print(f\"{file} -> moved to {extension_folders[extension]} folder\")\r\n\r\n# Usage\r\norganize_files(\"/path/to/your/folder\")\r\n```\r\n\r\n**Automation Examples:**\r\n- Email sending\r\n- Excel report generation\r\n- Web scraping\r\n- System administration\r\n- Social media posting\r\n\r\n## üíª Masa√ºst√º Uygulamalarƒ±\r\n\r\nPython ile kullanƒ±cƒ± dostu masa√ºst√º uygulamalarƒ± geli≈ütirebilirsiniz:\r\n\r\n### Tkinter ile Hesap Makinesi\r\n```python\r\nimport tkinter as tk\r\nfrom tkinter import ttk\r\n\r\nclass HesapMakinesi:\r\n    def __init__(self):\r\n        self.window = tk.Tk()\r\n        self.window.title(\"Python Hesap Makinesi\")\r\n        self.window.geometry(\"300x400\")\r\n        \r\n        self.current_input = \"\"\r\n        self.create_widgets()\r\n    \r\n    def create_widgets(self):\r\n        # Ekran\r\n        self.display = tk.Entry(self.window, font=(\"Arial\", 16), justify=\"right\")\r\n        self.display.grid(row=0, column=0, columnspan=4, padx=5, pady=5, sticky=\"ew\")\r\n        \r\n        # Butonlar\r\n        buttons = [\r\n            ('C', 1, 0), ('¬±', 1, 1), ('%', 1, 2), ('√∑', 1, 3),\r\n            ('7', 2, 0), ('8', 2, 1), ('9', 2, 2), ('√ó', 2, 3),\r\n            ('4', 3, 0), ('5', 3, 1), ('6', 3, 2), ('-', 3, 3),\r\n            ('1', 4, 0), ('2', 4, 1), ('3', 4, 2), ('+', 4, 3),\r\n            ('0', 5, 0), ('.', 5, 2), ('=', 5, 3)\r\n        ]\r\n        \r\n        for (text, row, col) in buttons:\r\n            btn = tk.Button(self.window, text=text, font=(\"Arial\", 14),\r\n                          command=lambda t=text: self.button_click(t))\r\n            btn.grid(row=row, column=col, padx=2, pady=2, sticky=\"nsew\")\r\n    \r\n    def button_click(self, value):\r\n        if value == '=':\r\n            try:\r\n                result = eval(self.current_input.replace('√ó', '*').replace('√∑', '/'))\r\n                self.display.delete(0, tk.END)\r\n                self.display.insert(0, str(result))\r\n                self.current_input = str(result)\r\n            except:\r\n                self.display.delete(0, tk.END)\r\n                self.display.insert(0, \"Hata\")\r\n                self.current_input = \"\"\r\n        elif value == 'C':\r\n            self.current_input = \"\"\r\n            self.display.delete(0, tk.END)\r\n        else:\r\n            self.current_input += value\r\n            self.display.delete(0, tk.END)\r\n            self.display.insert(0, self.current_input)\r\n    \r\n    def run(self):\r\n        self.window.mainloop()\r\n\r\n# Uygulamayƒ± ba≈ülat\r\nhesap_makinesi = HesapMakinesi()\r\nhesap_makinesi.run()\r\n```\r\n\r\n**Masa√ºst√º Framework'leri:**\r\n- **Tkinter**: Built-in GUI toolkit\r\n- **PyQt/PySide**: Profesyonel uygulamalar\r\n- **Kivy**: √áoklu platform mobil uygulamalar\r\n- **wxPython**: Native g√∂r√ºn√ºml√º uygulamalar\r\n\r\n## üåê API Geli≈ütirme\r\n\r\nModern web uygulamalarƒ±nƒ±n kalbi olan API'leri Python ile kolayca geli≈ütirebilirsiniz:\r\n\r\n### FastAPI ile RESTful API\r\n```python\r\nfrom fastapi import FastAPI, HTTPException\r\nfrom pydantic import BaseModel\r\nfrom typing import List\r\nimport uvicorn\r\n\r\napp = FastAPI(title=\"G√∂rev Y√∂neticisi API\", version=\"1.0.0\")\r\n\r\n# Veri modeli\r\nclass Gorev(BaseModel):\r\n    id: int\r\n    baslik: str\r\n    aciklama: str\r\n    tamamlandi: bool = False\r\n\r\n# In-memory veritabanƒ±\r\ngorevler = []\r\ngorev_id_counter = 1\r\n\r\n@app.get(\"/\")\r\nasync def root():\r\n    return {\"message\": \"G√∂rev Y√∂neticisi API'sine Ho≈ü Geldiniz!\"}\r\n\r\n@app.get(\"/gorevler\", response_model=List[Gorev])\r\nasync def gorevleri_getir():\r\n    return gorevler\r\n\r\n@app.post(\"/gorevler\", response_model=Gorev)\r\nasync def gorev_ekle(gorev: Gorev):\r\n    global gorev_id_counter\r\n    gorev.id = gorev_id_counter\r\n    gorev_id_counter += 1\r\n    gorevler.append(gorev)\r\n    return gorev\r\n\r\n@app.put(\"/gorevler/{gorev_id}\", response_model=Gorev)\r\nasync def gorev_guncelle(gorev_id: int, gorev: Gorev):\r\n    for i, mevcut_gorev in enumerate(gorevler):\r\n        if mevcut_gorev.id == gorev_id:\r\n            gorev.id = gorev_id\r\n            gorevler[i] = gorev\r\n            return gorev\r\n    raise HTTPException(status_code=404, detail=\"G√∂rev bulunamadƒ±\")\r\n\r\n@app.delete(\"/gorevler/{gorev_id}\")\r\nasync def gorev_sil(gorev_id: int):\r\n    for i, gorev in enumerate(gorevler):\r\n        if gorev.id == gorev_id:\r\n            del gorevler[i]\r\n            return {\"message\": \"G√∂rev silindi\"}\r\n    raise HTTPException(status_code=404, detail=\"G√∂rev bulunamadƒ±\")\r\n\r\nif __name__ == \"__main__\":\r\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\r\n```\r\n\r\n## üì± Mobil Uygulama Geli≈ütirme\r\n\r\nPython ile cross-platform mobil uygulamalar geli≈ütirebilirsiniz:\r\n\r\n### Kivy ile Basit Mobil App\r\n```python\r\nfrom kivy.app import App\r\nfrom kivy.uix.boxlayout import BoxLayout\r\nfrom kivy.uix.button import Button\r\nfrom kivy.uix.label import Label\r\n\r\nclass AnaMen√º(BoxLayout):\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n        self.orientation = 'vertical'\r\n        self.spacing = 10\r\n        self.padding = 20\r\n        \r\n        # Ba≈ülƒ±k\r\n        baslik = Label(text='Python Mobil Uygulama', \r\n                      font_size='24sp',\r\n                      size_hint_y=0.2)\r\n        self.add_widget(baslik)\r\n        \r\n        # Butonlar\r\n        butonlar = [\r\n            ('Profil', self.profil_ac),\r\n            ('Ayarlar', self.ayarlar_ac),\r\n            ('Hakkƒ±nda', self.hakkinda_ac)\r\n        ]\r\n        \r\n        for buton_text, callback in butonlar:\r\n            btn = Button(text=buton_text, \r\n                        size_hint_y=0.15,\r\n                        font_size='18sp')\r\n            btn.bind(on_press=callback)\r\n            self.add_widget(btn)\r\n    \r\n    def profil_ac(self, instance):\r\n        print(\"Profil sayfasƒ± a√ßƒ±lƒ±yor...\")\r\n    \r\n    def ayarlar_ac(self, instance):\r\n        print(\"Ayarlar sayfasƒ± a√ßƒ±lƒ±yor...\")\r\n    \r\n    def hakkinda_ac(self, instance):\r\n        print(\"Hakkƒ±nda sayfasƒ± a√ßƒ±lƒ±yor...\")\r\n\r\nclass MobilUygulamaApp(App):\r\n    def build(self):\r\n        return AnaMen√º()\r\n\r\nMobilUygulamaApp().run()\r\n```\r\n\r\n## üîç Career Opportunities with Python\r\n\r\nLearning Python opens these career paths for you:\r\n\r\n### 1. **Web Developer**\r\n- Average Salary: $35,000 - $65,000\r\n- Technologies Used: Django, Flask, FastAPI\r\n\r\n### 2. **Data Scientist**\r\n- Average Salary: $50,000 - $95,000\r\n- Technologies Used: Pandas, NumPy, Scikit-learn\r\n\r\n### 3. **Machine Learning Engineer**\r\n- Average Salary: $60,000 - $120,000\r\n- Technologies Used: TensorFlow, PyTorch, Keras\r\n\r\n### 4. **DevOps Engineer**\r\n- Average Salary: $45,000 - $80,000\r\n- Technologies Used: Ansible, Docker, Kubernetes\r\n\r\n### 5. **Backend Developer**\r\n- Average Salary: $40,000 - $75,000\r\n- Technologies Used: Django, FastAPI, PostgreSQL\r\n\r\n## üöÄ Where to Start Learning Python?\r\n\r\n### Beginner Roadmap:\r\n1. **Learn Python Fundamentals** (2-3 weeks)\r\n   - Variables, data types\r\n   - Loops and conditions\r\n   - Functions\r\n\r\n2. **Project-Based Learning** (1-2 months)\r\n   - Simple calculator\r\n   - Todo list application\r\n   - Web scraper\r\n\r\n3. **Specialized Framework** (2-3 months)\r\n   - Django/Flask for web\r\n   - Pandas/NumPy for Data Science\r\n   - TensorFlow/PyTorch for AI\r\n\r\n4. **Build Real Projects** (3-6 months)\r\n   - Create Github portfolio\r\n   - Contribute to open source projects\r\n   - Deploy your own projects\r\n\r\n## üí° Conclusion\r\n\r\nPython's versatility makes it ideal for both beginners and advanced developers. You can use it in a wide range from web development to artificial intelligence, from data analysis to game development.\r\n\r\n**The best time to start learning Python is now!** You can start your Python adventure with interactive quizzes and projects on the Zumenzu platform.\r\n\r\n### üîó Related Resources:\r\n- [Official Python Documentation](https://docs.python.org/3/)\r\n- [Python Package Index (PyPI)](https://pypi.org/)\r\n- [GitHub Python Projects](https://github.com/topics/python)\r\n- [Python Community Forum](https://discuss.python.org/)\r\n\r\n---\r\n\r\n*This article was prepared by the Zumenzu team for those who want to learn Python. Visit the [Zumenzu platform](/) for interactive Python lessons.*",
    "category": "Python Basics",
    "tags": "[\"python\",\"programming\",\"career\",\"web development\",\"artificial intelligence\",\"data analysis\"]",
    "featured": true,
    "readTime": "12 min",
    "estimatedMinutes": 5,
    "author": "Zumenzu Team",
    "seoKeywords": null,
    "metaDescription": null,
    "socialImageUrl": null,
    "isPublished": true,
    "publishedAt": "2025-08-10T22:22:53.899Z",
    "language": "tr"
  },
  {
    "title": "Python Web Development & APIs in 2025: FastAPI, Microservices & Modern Deployment",
    "slug": "python-web-development-apis-2025",
    "description": "Master modern Python web development in 2025! Learn FastAPI, microservices, containerization, and cloud deployment. Complete guide with real-world projects.",
    "excerpt": null,
    "content": "\r\n# Python Web Development & APIs in 2025: FastAPI, Microservices & Modern Deployment\r\n\r\nWeb development has evolved dramatically, and Python is leading the charge in 2025! With lightning-fast frameworks like FastAPI, containerization with Docker, and seamless cloud deployment, Python has become the go-to choice for modern web applications and APIs.\r\n\r\n## üöÄ Why Python Dominates Web Development in 2025?\r\n\r\n### The Modern Python Web Stack:\r\n\r\n- ‚úÖ **FastAPI**: Lightning-fast, automatic API documentation\r\n- ‚úÖ **Async/Await**: Native asynchronous programming\r\n- ‚úÖ **Type Hints**: Better code quality and IDE support\r\n- ‚úÖ **Docker**: Containerized deployment everywhere\r\n- ‚úÖ **Cloud Native**: Perfect for AWS, GCP, Azure\r\n- ‚úÖ **Microservices**: Scalable architecture patterns\r\n\r\n### What's Hot in 2025:\r\n\r\n- üî• **AI-Powered APIs**: Integrating LLMs into web services\r\n- üî• **Edge Computing**: Python at the edge with serverless\r\n- üî• **Real-time Apps**: WebSocket and Server-Sent Events\r\n- üî• **GraphQL APIs**: Modern data fetching patterns\r\n- üî• **Observability**: Advanced monitoring and tracing\r\n\r\n## üõ†Ô∏è Setting Up Your 2025 Python Web Development Environment\r\n\r\n### Essential Tools and Libraries\r\n\r\n```bash\r\n# Core web frameworks\r\npip install fastapi uvicorn[standard]\r\npip install django djangorestframework\r\npip install flask flask-restx\r\n\r\n# Database and ORM\r\npip install sqlalchemy alembic\r\npip install psycopg2-binary pymongo\r\npip install redis celery\r\n\r\n# Authentication and Security\r\npip install python-jose[cryptography]\r\npip install passlib[bcrypt] python-multipart\r\npip install authlib requests-oauthlib\r\n\r\n# Testing and Quality\r\npip install pytest pytest-asyncio httpx\r\npip install black isort flake8 mypy\r\n\r\n# Deployment and DevOps\r\npip install gunicorn\r\npip install python-dotenv\r\npip install prometheus-client\r\n\r\n# Modern async libraries\r\npip install aiofiles aioredis\r\npip install websockets\r\npip install httpx\r\n```\r\n\r\n### Docker Development Environment\r\n\r\n```dockerfile\r\n# Dockerfile\r\nFROM python:3.11-slim\r\n\r\nWORKDIR /app\r\n\r\n# Install system dependencies\r\nRUN apt-get update && apt-get install -y \\\r\n    gcc \\\r\n    && rm -rf /var/lib/apt/lists/*\r\n\r\n# Copy requirements and install Python dependencies\r\nCOPY requirements.txt .\r\nRUN pip install --no-cache-dir -r requirements.txt\r\n\r\n# Copy application code\r\nCOPY . .\r\n\r\n# Expose port\r\nEXPOSE 8000\r\n\r\n# Run the application\r\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--reload\"]\r\n```\r\n\r\n```yaml\r\n# docker-compose.yml\r\nversion: \"3.8\"\r\nservices:\r\n  web:\r\n    build: .\r\n    ports:\r\n      - \"8000:8000\"\r\n    environment:\r\n      - DATABASE_URL=postgresql://user:password@db:5432/myapp\r\n      - REDIS_URL=redis://redis:6379\r\n    depends_on:\r\n      - db\r\n      - redis\r\n    volumes:\r\n      - .:/app\r\n\r\n  db:\r\n    image: postgres:15\r\n    environment:\r\n      POSTGRES_DB: myapp\r\n      POSTGRES_USER: user\r\n      POSTGRES_PASSWORD: password\r\n    volumes:\r\n      - postgres_data:/var/lib/postgresql/data\r\n    ports:\r\n      - \"5432:5432\"\r\n\r\n  redis:\r\n    image: redis:7-alpine\r\n    ports:\r\n      - \"6379:6379\"\r\n\r\nvolumes:\r\n  postgres_data:\r\n```\r\n\r\n## ‚ö° Project 1: Building a Modern FastAPI Application\r\n\r\n### Complete E-commerce API with FastAPI\r\n\r\n```python\r\nfrom fastapi import FastAPI, Depends, HTTPException, status, BackgroundTasks\r\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\r\nfrom sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, Boolean, ForeignKey\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker, Session, relationship\r\nfrom pydantic import BaseModel, EmailStr, validator\r\nfrom typing import Optional, List\r\nfrom datetime import datetime, timedelta\r\nimport jwt\r\nimport bcrypt\r\nimport uuid\r\nimport asyncio\r\nimport aioredis\r\nfrom contextlib import asynccontextmanager\r\n\r\n# Database setup\r\nDATABASE_URL = \"postgresql://user:password@localhost/ecommerce\"\r\nengine = create_engine(DATABASE_URL)\r\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\r\nBase = declarative_base()\r\n\r\n# Redis setup\r\nredis_client = None\r\n\r\n@asynccontextmanager\r\nasync def lifespan(app: FastAPI):\r\n    # Startup\r\n    global redis_client\r\n    redis_client = await aioredis.from_url(\"redis://localhost:6379\")\r\n    yield\r\n    # Shutdown\r\n    await redis_client.close()\r\n\r\n# FastAPI app with lifespan management\r\napp = FastAPI(\r\n    title=\"Modern E-commerce API\",\r\n    description=\"A complete e-commerce API built with FastAPI in 2025\",\r\n    version=\"1.0.0\",\r\n    lifespan=lifespan\r\n)\r\n\r\n# Security\r\nsecurity = HTTPBearer()\r\n\r\n# Middleware\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\"http://localhost:3000\", \"https://myapp.com\"],\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\napp.add_middleware(\r\n    TrustedHostMiddleware,\r\n    allowed_hosts=[\"localhost\", \"*.myapp.com\"]\r\n)\r\n\r\n# Database Models\r\nclass User(Base):\r\n    __tablename__ = \"users\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    email = Column(String, unique=True, index=True, nullable=False)\r\n    username = Column(String, unique=True, index=True, nullable=False)\r\n    hashed_password = Column(String, nullable=False)\r\n    first_name = Column(String)\r\n    last_name = Column(String)\r\n    is_active = Column(Boolean, default=True)\r\n    is_admin = Column(Boolean, default=False)\r\n    created_at = Column(DateTime, default=datetime.utcnow)\r\n\r\n    # Relationships\r\n    orders = relationship(\"Order\", back_populates=\"user\")\r\n\r\nclass Category(Base):\r\n    __tablename__ = \"categories\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    name = Column(String, unique=True, index=True)\r\n    description = Column(String)\r\n\r\n    products = relationship(\"Product\", back_populates=\"category\")\r\n\r\nclass Product(Base):\r\n    __tablename__ = \"products\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    name = Column(String, index=True)\r\n    description = Column(String)\r\n    price = Column(Float)\r\n    stock_quantity = Column(Integer, default=0)\r\n    category_id = Column(Integer, ForeignKey(\"categories.id\"))\r\n    image_url = Column(String)\r\n    is_active = Column(Boolean, default=True)\r\n    created_at = Column(DateTime, default=datetime.utcnow)\r\n\r\n    category = relationship(\"Category\", back_populates=\"products\")\r\n    order_items = relationship(\"OrderItem\", back_populates=\"product\")\r\n\r\nclass Order(Base):\r\n    __tablename__ = \"orders\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\r\n    total_amount = Column(Float)\r\n    status = Column(String, default=\"pending\")  # pending, processing, shipped, delivered\r\n    created_at = Column(DateTime, default=datetime.utcnow)\r\n\r\n    user = relationship(\"User\", back_populates=\"orders\")\r\n    items = relationship(\"OrderItem\", back_populates=\"order\")\r\n\r\nclass OrderItem(Base):\r\n    __tablename__ = \"order_items\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    order_id = Column(Integer, ForeignKey(\"orders.id\"))\r\n    product_id = Column(Integer, ForeignKey(\"products.id\"))\r\n    quantity = Column(Integer)\r\n    price = Column(Float)  # Price at time of order\r\n\r\n    order = relationship(\"Order\", back_populates=\"items\")\r\n    product = relationship(\"Product\", back_populates=\"order_items\")\r\n\r\n# Pydantic Models\r\nclass UserCreate(BaseModel):\r\n    email: EmailStr\r\n    username: str\r\n    password: str\r\n    first_name: Optional[str] = None\r\n    last_name: Optional[str] = None\r\n\r\n    @validator('password')\r\n    def validate_password(cls, v):\r\n        if len(v) < 8:\r\n            raise ValueError('Password must be at least 8 characters long')\r\n        return v\r\n\r\nclass UserResponse(BaseModel):\r\n    id: int\r\n    email: str\r\n    username: str\r\n    first_name: Optional[str]\r\n    last_name: Optional[str]\r\n    is_active: bool\r\n    created_at: datetime\r\n\r\n    class Config:\r\n        from_attributes = True\r\n\r\nclass ProductCreate(BaseModel):\r\n    name: str\r\n    description: Optional[str] = None\r\n    price: float\r\n    stock_quantity: int = 0\r\n    category_id: int\r\n    image_url: Optional[str] = None\r\n\r\nclass ProductResponse(BaseModel):\r\n    id: int\r\n    name: str\r\n    description: Optional[str]\r\n    price: float\r\n    stock_quantity: int\r\n    category_id: int\r\n    image_url: Optional[str]\r\n    is_active: bool\r\n    created_at: datetime\r\n\r\n    class Config:\r\n        from_attributes = True\r\n\r\nclass OrderCreate(BaseModel):\r\n    items: List[dict]  # [{\"product_id\": 1, \"quantity\": 2}, ...]\r\n\r\nclass Token(BaseModel):\r\n    access_token: str\r\n    token_type: str\r\n\r\n# Utility Functions\r\ndef get_db():\r\n    db = SessionLocal()\r\n    try:\r\n        yield db\r\n    finally:\r\n        db.close()\r\n\r\ndef hash_password(password: str) -> str:\r\n    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')\r\n\r\ndef verify_password(password: str, hashed: str) -> bool:\r\n    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))\r\n\r\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\r\n    to_encode = data.copy()\r\n    if expires_delta:\r\n        expire = datetime.utcnow() + expires_delta\r\n    else:\r\n        expire = datetime.utcnow() + timedelta(minutes=15)\r\n    to_encode.update({\"exp\": expire})\r\n    encoded_jwt = jwt.encode(to_encode, \"secret-key\", algorithm=\"HS256\")\r\n    return encoded_jwt\r\n\r\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security), db: Session = Depends(get_db)):\r\n    try:\r\n        payload = jwt.decode(credentials.credentials, \"secret-key\", algorithms=[\"HS256\"])\r\n        email: str = payload.get(\"sub\")\r\n        if email is None:\r\n            raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n    except jwt.PyJWTError:\r\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\r\n\r\n    user = db.query(User).filter(User.email == email).first()\r\n    if user is None:\r\n        raise HTTPException(status_code=401, detail=\"User not found\")\r\n    return user\r\n\r\n# Background Tasks\r\nasync def send_order_confirmation_email(user_email: str, order_id: int):\r\n    \"\"\"Send order confirmation email (simulated)\"\"\"\r\n    await asyncio.sleep(2)  # Simulate email sending delay\r\n    print(f\"Order confirmation email sent to {user_email} for order {order_id}\")\r\n\r\nasync def update_inventory(product_id: int, quantity: int):\r\n    \"\"\"Update inventory in background\"\"\"\r\n    await asyncio.sleep(1)  # Simulate inventory update\r\n    print(f\"Inventory updated for product {product_id}: -{quantity}\")\r\n\r\n# API Routes\r\n\r\n@app.get(\"/\")\r\nasync def root():\r\n    return {\"message\": \"Welcome to Modern E-commerce API 2025\"}\r\n\r\n@app.get(\"/health\")\r\nasync def health_check():\r\n    return {\r\n        \"status\": \"healthy\",\r\n        \"timestamp\": datetime.utcnow(),\r\n        \"version\": \"1.0.0\"\r\n    }\r\n\r\n# Authentication Routes\r\n@app.post(\"/auth/register\", response_model=UserResponse)\r\nasync def register(user: UserCreate, db: Session = Depends(get_db)):\r\n    # Check if user already exists\r\n    if db.query(User).filter(User.email == user.email).first():\r\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\r\n\r\n    if db.query(User).filter(User.username == user.username).first():\r\n        raise HTTPException(status_code=400, detail=\"Username already taken\")\r\n\r\n    # Create new user\r\n    hashed_password = hash_password(user.password)\r\n    db_user = User(\r\n        email=user.email,\r\n        username=user.username,\r\n        hashed_password=hashed_password,\r\n        first_name=user.first_name,\r\n        last_name=user.last_name\r\n    )\r\n\r\n    db.add(db_user)\r\n    db.commit()\r\n    db.refresh(db_user)\r\n\r\n    return db_user\r\n\r\n@app.post(\"/auth/login\", response_model=Token)\r\nasync def login(email: str, password: str, db: Session = Depends(get_db)):\r\n    user = db.query(User).filter(User.email == email).first()\r\n\r\n    if not user or not verify_password(password, user.hashed_password):\r\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\r\n\r\n    access_token = create_access_token(data={\"sub\": user.email})\r\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\r\n\r\n# User Routes\r\n@app.get(\"/users/me\", response_model=UserResponse)\r\nasync def get_current_user_profile(current_user: User = Depends(get_current_user)):\r\n    return current_user\r\n\r\n@app.get(\"/users\", response_model=List[UserResponse])\r\nasync def get_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\r\n    users = db.query(User).offset(skip).limit(limit).all()\r\n    return users\r\n\r\n# Product Routes\r\n@app.post(\"/products\", response_model=ProductResponse)\r\nasync def create_product(\r\n    product: ProductCreate,\r\n    db: Session = Depends(get_db),\r\n    current_user: User = Depends(get_current_user)\r\n):\r\n    if not current_user.is_admin:\r\n        raise HTTPException(status_code=403, detail=\"Admin access required\")\r\n\r\n    db_product = Product(**product.dict())\r\n    db.add(db_product)\r\n    db.commit()\r\n    db.refresh(db_product)\r\n\r\n    # Cache the product\r\n    await redis_client.setex(f\"product:{db_product.id}\", 3600, db_product.name)\r\n\r\n    return db_product\r\n\r\n@app.get(\"/products\", response_model=List[ProductResponse])\r\nasync def get_products(\r\n    skip: int = 0,\r\n    limit: int = 100,\r\n    category_id: Optional[int] = None,\r\n    db: Session = Depends(get_db)\r\n):\r\n    query = db.query(Product).filter(Product.is_active == True)\r\n\r\n    if category_id:\r\n        query = query.filter(Product.category_id == category_id)\r\n\r\n    products = query.offset(skip).limit(limit).all()\r\n    return products\r\n\r\n@app.get(\"/products/{product_id}\", response_model=ProductResponse)\r\nasync def get_product(product_id: int, db: Session = Depends(get_db)):\r\n    # Try to get from cache first\r\n    cached_product = await redis_client.get(f\"product:{product_id}\")\r\n\r\n    product = db.query(Product).filter(Product.id == product_id).first()\r\n    if not product:\r\n        raise HTTPException(status_code=404, detail=\"Product not found\")\r\n\r\n    return product\r\n\r\n# Order Routes\r\n@app.post(\"/orders\")\r\nasync def create_order(\r\n    order: OrderCreate,\r\n    background_tasks: BackgroundTasks,\r\n    db: Session = Depends(get_db),\r\n    current_user: User = Depends(get_current_user)\r\n):\r\n    # Calculate total and validate products\r\n    total_amount = 0\r\n    order_items = []\r\n\r\n    for item in order.items:\r\n        product = db.query(Product).filter(Product.id == item[\"product_id\"]).first()\r\n        if not product:\r\n            raise HTTPException(status_code=404, detail=f\"Product {item['product_id']} not found\")\r\n\r\n        if product.stock_quantity < item[\"quantity\"]:\r\n            raise HTTPException(status_code=400, detail=f\"Insufficient stock for {product.name}\")\r\n\r\n        item_total = product.price * item[\"quantity\"]\r\n        total_amount += item_total\r\n\r\n        order_items.append({\r\n            \"product_id\": product.id,\r\n            \"quantity\": item[\"quantity\"],\r\n            \"price\": product.price\r\n        })\r\n\r\n    # Create order\r\n    db_order = Order(\r\n        user_id=current_user.id,\r\n        total_amount=total_amount\r\n    )\r\n    db.add(db_order)\r\n    db.commit()\r\n    db.refresh(db_order)\r\n\r\n    # Create order items\r\n    for item in order_items:\r\n        db_order_item = OrderItem(\r\n            order_id=db_order.id,\r\n            **item\r\n        )\r\n        db.add(db_order_item)\r\n\r\n        # Update stock\r\n        product = db.query(Product).filter(Product.id == item[\"product_id\"]).first()\r\n        product.stock_quantity -= item[\"quantity\"]\r\n\r\n    db.commit()\r\n\r\n    # Background tasks\r\n    background_tasks.add_task(send_order_confirmation_email, current_user.email, db_order.id)\r\n    for item in order_items:\r\n        background_tasks.add_task(update_inventory, item[\"product_id\"], item[\"quantity\"])\r\n\r\n    return {\"order_id\": db_order.id, \"total_amount\": total_amount, \"status\": \"created\"}\r\n\r\n@app.get(\"/orders/me\")\r\nasync def get_my_orders(\r\n    db: Session = Depends(get_db),\r\n    current_user: User = Depends(get_current_user)\r\n):\r\n    orders = db.query(Order).filter(Order.user_id == current_user.id).all()\r\n    return orders\r\n\r\n# WebSocket for real-time notifications\r\n@app.websocket(\"/ws/{user_id}\")\r\nasync def websocket_endpoint(websocket: WebSocket, user_id: int):\r\n    await websocket.accept()\r\n    try:\r\n        while True:\r\n            # Send periodic updates\r\n            await websocket.send_json({\r\n                \"type\": \"heartbeat\",\r\n                \"timestamp\": datetime.utcnow().isoformat()\r\n            })\r\n            await asyncio.sleep(30)\r\n    except Exception as e:\r\n        print(f\"WebSocket error: {e}\")\r\n\r\n# Analytics and Monitoring\r\n@app.get(\"/analytics/sales\")\r\nasync def get_sales_analytics(\r\n    current_user: User = Depends(get_current_user),\r\n    db: Session = Depends(get_db)\r\n):\r\n    if not current_user.is_admin:\r\n        raise HTTPException(status_code=403, detail=\"Admin access required\")\r\n\r\n    # Get sales data from last 30 days\r\n    thirty_days_ago = datetime.utcnow() - timedelta(days=30)\r\n\r\n    total_sales = db.query(Order).filter(Order.created_at >= thirty_days_ago).count()\r\n    total_revenue = db.query(Order).filter(Order.created_at >= thirty_days_ago).with_entities(\r\n        func.sum(Order.total_amount)\r\n    ).scalar() or 0\r\n\r\n    return {\r\n        \"total_sales\": total_sales,\r\n        \"total_revenue\": float(total_revenue),\r\n        \"period\": \"30_days\"\r\n    }\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000, reload=True)\r\n```\r\n\r\n## üîß Project 2: Microservices Architecture with Python\r\n\r\n### User Service (Microservice)\r\n\r\n```python\r\n# user_service/main.py\r\nfrom fastapi import FastAPI, Depends, HTTPException\r\nfrom sqlalchemy import Column, Integer, String, Boolean, DateTime, create_engine\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker, Session\r\nfrom pydantic import BaseModel, EmailStr\r\nfrom datetime import datetime\r\nimport httpx\r\nimport os\r\n\r\napp = FastAPI(title=\"User Service\", version=\"1.0.0\")\r\n\r\n# Database\r\nDATABASE_URL = os.getenv(\"DATABASE_URL\", \"postgresql://user:password@localhost/users\")\r\nengine = create_engine(DATABASE_URL)\r\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\r\nBase = declarative_base()\r\n\r\nclass User(Base):\r\n    __tablename__ = \"users\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    email = Column(String, unique=True, index=True)\r\n    username = Column(String, unique=True, index=True)\r\n    first_name = Column(String)\r\n    last_name = Column(String)\r\n    is_active = Column(Boolean, default=True)\r\n    created_at = Column(DateTime, default=datetime.utcnow)\r\n\r\nclass UserCreate(BaseModel):\r\n    email: EmailStr\r\n    username: str\r\n    first_name: str\r\n    last_name: str\r\n\r\nclass UserResponse(BaseModel):\r\n    id: int\r\n    email: str\r\n    username: str\r\n    first_name: str\r\n    last_name: str\r\n    is_active: bool\r\n    created_at: datetime\r\n\r\n    class Config:\r\n        from_attributes = True\r\n\r\ndef get_db():\r\n    db = SessionLocal()\r\n    try:\r\n        yield db\r\n    finally:\r\n        db.close()\r\n\r\n@app.post(\"/users\", response_model=UserResponse)\r\nasync def create_user(user: UserCreate, db: Session = Depends(get_db)):\r\n    # Check if user exists\r\n    if db.query(User).filter(User.email == user.email).first():\r\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\r\n\r\n    db_user = User(**user.dict())\r\n    db.add(db_user)\r\n    db.commit()\r\n    db.refresh(db_user)\r\n\r\n    # Notify other services\r\n    await notify_user_created(db_user.id, db_user.email)\r\n\r\n    return db_user\r\n\r\n@app.get(\"/users/{user_id}\", response_model=UserResponse)\r\nasync def get_user(user_id: int, db: Session = Depends(get_db)):\r\n    user = db.query(User).filter(User.id == user_id).first()\r\n    if not user:\r\n        raise HTTPException(status_code=404, detail=\"User not found\")\r\n    return user\r\n\r\nasync def notify_user_created(user_id: int, email: str):\r\n    \"\"\"Notify other microservices about user creation\"\"\"\r\n    notification_service_url = os.getenv(\"NOTIFICATION_SERVICE_URL\", \"http://localhost:8001\")\r\n\r\n    async with httpx.AsyncClient() as client:\r\n        try:\r\n            await client.post(f\"{notification_service_url}/send-welcome-email\",\r\n                            json={\"user_id\": user_id, \"email\": email})\r\n        except Exception as e:\r\n            print(f\"Failed to notify notification service: {e}\")\r\n\r\n@app.get(\"/health\")\r\nasync def health():\r\n    return {\"status\": \"healthy\", \"service\": \"user-service\"}\r\n```\r\n\r\n### Notification Service (Microservice)\r\n\r\n```python\r\n# notification_service/main.py\r\nfrom fastapi import FastAPI, BackgroundTasks\r\nfrom pydantic import BaseModel\r\nimport asyncio\r\nimport aiosmtplib\r\nfrom email.mime.text import MIMEText\r\nfrom email.mime.multipart import MIMEMultipart\r\nimport os\r\n\r\napp = FastAPI(title=\"Notification Service\", version=\"1.0.0\")\r\n\r\nclass EmailNotification(BaseModel):\r\n    user_id: int\r\n    email: str\r\n    subject: str = \"Welcome!\"\r\n    body: str = \"Welcome to our platform!\"\r\n\r\nclass SMSNotification(BaseModel):\r\n    user_id: int\r\n    phone: str\r\n    message: str\r\n\r\nasync def send_email(to_email: str, subject: str, body: str):\r\n    \"\"\"Send email using SMTP\"\"\"\r\n    smtp_server = os.getenv(\"SMTP_SERVER\", \"smtp.gmail.com\")\r\n    smtp_port = int(os.getenv(\"SMTP_PORT\", \"587\"))\r\n    smtp_username = os.getenv(\"SMTP_USERNAME\")\r\n    smtp_password = os.getenv(\"SMTP_PASSWORD\")\r\n\r\n    message = MIMEMultipart()\r\n    message[\"From\"] = smtp_username\r\n    message[\"To\"] = to_email\r\n    message[\"Subject\"] = subject\r\n\r\n    message.attach(MIMEText(body, \"plain\"))\r\n\r\n    try:\r\n        await aiosmtplib.send(\r\n            message,\r\n            hostname=smtp_server,\r\n            port=smtp_port,\r\n            start_tls=True,\r\n            username=smtp_username,\r\n            password=smtp_password,\r\n        )\r\n        print(f\"Email sent to {to_email}\")\r\n    except Exception as e:\r\n        print(f\"Failed to send email: {e}\")\r\n\r\n@app.post(\"/send-welcome-email\")\r\nasync def send_welcome_email(notification: dict, background_tasks: BackgroundTasks):\r\n    background_tasks.add_task(\r\n        send_email,\r\n        notification[\"email\"],\r\n        \"Welcome to Our Platform!\",\r\n        f\"Hello! Welcome to our platform. Your user ID is {notification['user_id']}\"\r\n    )\r\n    return {\"status\": \"email queued\"}\r\n\r\n@app.post(\"/send-email\")\r\nasync def send_custom_email(notification: EmailNotification, background_tasks: BackgroundTasks):\r\n    background_tasks.add_task(send_email, notification.email, notification.subject, notification.body)\r\n    return {\"status\": \"email queued\"}\r\n\r\n@app.get(\"/health\")\r\nasync def health():\r\n    return {\"status\": \"healthy\", \"service\": \"notification-service\"}\r\n```\r\n\r\n### API Gateway\r\n\r\n```python\r\n# gateway/main.py\r\nfrom fastapi import FastAPI, Request, HTTPException\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\nimport httpx\r\nimport asyncio\r\nfrom typing import Dict\r\nimport time\r\nimport os\r\n\r\napp = FastAPI(title=\"API Gateway\", version=\"1.0.0\")\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\"*\"],\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\n# Service registry\r\nSERVICES = {\r\n    \"users\": os.getenv(\"USER_SERVICE_URL\", \"http://localhost:8000\"),\r\n    \"notifications\": os.getenv(\"NOTIFICATION_SERVICE_URL\", \"http://localhost:8001\"),\r\n    \"products\": os.getenv(\"PRODUCT_SERVICE_URL\", \"http://localhost:8002\"),\r\n}\r\n\r\n# Rate limiting storage\r\nrequest_counts: Dict[str, list] = {}\r\n\r\nasync def rate_limit(client_ip: str, limit: int = 100, window: int = 60):\r\n    \"\"\"Simple rate limiting\"\"\"\r\n    now = time.time()\r\n\r\n    if client_ip not in request_counts:\r\n        request_counts[client_ip] = []\r\n\r\n    # Remove old requests outside the window\r\n    request_counts[client_ip] = [\r\n        req_time for req_time in request_counts[client_ip]\r\n        if now - req_time < window\r\n    ]\r\n\r\n    if len(request_counts[client_ip]) >= limit:\r\n        raise HTTPException(status_code=429, detail=\"Rate limit exceeded\")\r\n\r\n    request_counts[client_ip].append(now)\r\n\r\nasync def proxy_request(service: str, path: str, method: str, request: Request):\r\n    \"\"\"Proxy request to microservice\"\"\"\r\n    if service not in SERVICES:\r\n        raise HTTPException(status_code=404, detail=\"Service not found\")\r\n\r\n    service_url = SERVICES[service]\r\n    url = f\"{service_url}{path}\"\r\n\r\n    # Get request data\r\n    headers = dict(request.headers)\r\n    body = await request.body() if method in [\"POST\", \"PUT\", \"PATCH\"] else None\r\n\r\n    async with httpx.AsyncClient() as client:\r\n        try:\r\n            response = await client.request(\r\n                method=method,\r\n                url=url,\r\n                headers=headers,\r\n                content=body,\r\n                timeout=30.0\r\n            )\r\n            return response.json() if response.content else {}\r\n        except httpx.TimeoutException:\r\n            raise HTTPException(status_code=504, detail=\"Service timeout\")\r\n        except Exception as e:\r\n            raise HTTPException(status_code=502, detail=f\"Service error: {str(e)}\")\r\n\r\n@app.api_route(\"/api/{service}/{path:path}\", methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"])\r\nasync def gateway(service: str, path: str, request: Request):\r\n    # Rate limiting\r\n    client_ip = request.client.host\r\n    await rate_limit(client_ip)\r\n\r\n    # Add leading slash to path\r\n    if not path.startswith(\"/\"):\r\n        path = \"/\" + path\r\n\r\n    # Proxy the request\r\n    return await proxy_request(service, path, request.method, request)\r\n\r\n@app.get(\"/health\")\r\nasync def health():\r\n    \"\"\"Check health of all services\"\"\"\r\n    health_status = {}\r\n\r\n    async with httpx.AsyncClient() as client:\r\n        for service, url in SERVICES.items():\r\n            try:\r\n                response = await client.get(f\"{url}/health\", timeout=5.0)\r\n                health_status[service] = {\r\n                    \"status\": \"healthy\" if response.status_code == 200 else \"unhealthy\",\r\n                    \"response_time\": response.elapsed.total_seconds()\r\n                }\r\n            except Exception as e:\r\n                health_status[service] = {\r\n                    \"status\": \"unhealthy\",\r\n                    \"error\": str(e)\r\n                }\r\n\r\n    return {\"gateway\": \"healthy\", \"services\": health_status}\r\n\r\n@app.get(\"/\")\r\nasync def root():\r\n    return {\"message\": \"API Gateway\", \"version\": \"1.0.0\", \"services\": list(SERVICES.keys())}\r\n```\r\n\r\n## üöÄ Project 3: Real-time Chat Application with WebSockets\r\n\r\n### WebSocket Chat Server\r\n\r\n```python\r\n# chat_service/main.py\r\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\nfrom sqlalchemy import Column, Integer, String, DateTime, Text, create_engine\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker, Session\r\nfrom pydantic import BaseModel\r\nfrom typing import List, Dict\r\nimport json\r\nimport asyncio\r\nfrom datetime import datetime\r\nimport redis\r\nimport jwt\r\n\r\napp = FastAPI(title=\"Real-time Chat Service\")\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\"*\"],\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\n# Database setup\r\nDATABASE_URL = \"postgresql://user:password@localhost/chat\"\r\nengine = create_engine(DATABASE_URL)\r\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\r\nBase = declarative_base()\r\n\r\n# Redis for pub/sub\r\nredis_client = redis.Redis(host='localhost', port=6379, decode_responses=True)\r\n\r\nclass ChatRoom(Base):\r\n    __tablename__ = \"chat_rooms\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    name = Column(String, unique=True, index=True)\r\n    description = Column(Text)\r\n    created_at = Column(DateTime, default=datetime.utcnow)\r\n\r\nclass Message(Base):\r\n    __tablename__ = \"messages\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    room_id = Column(Integer)\r\n    user_id = Column(Integer)\r\n    username = Column(String)\r\n    content = Column(Text)\r\n    message_type = Column(String, default=\"text\")  # text, image, file\r\n    created_at = Column(DateTime, default=datetime.utcnow)\r\n\r\nclass ConnectionManager:\r\n    def __init__(self):\r\n        self.active_connections: Dict[str, List[WebSocket]] = {}\r\n        self.user_connections: Dict[int, WebSocket] = {}\r\n\r\n    async def connect(self, websocket: WebSocket, room_id: str, user_id: int):\r\n        await websocket.accept()\r\n\r\n        if room_id not in self.active_connections:\r\n            self.active_connections[room_id] = []\r\n\r\n        self.active_connections[room_id].append(websocket)\r\n        self.user_connections[user_id] = websocket\r\n\r\n        # Notify room about new user\r\n        await self.broadcast_to_room(room_id, {\r\n            \"type\": \"user_joined\",\r\n            \"user_id\": user_id,\r\n            \"timestamp\": datetime.utcnow().isoformat()\r\n        })\r\n\r\n    def disconnect(self, websocket: WebSocket, room_id: str, user_id: int):\r\n        if room_id in self.active_connections:\r\n            self.active_connections[room_id].remove(websocket)\r\n\r\n        if user_id in self.user_connections:\r\n            del self.user_connections[user_id]\r\n\r\n    async def send_personal_message(self, message: str, websocket: WebSocket):\r\n        await websocket.send_text(message)\r\n\r\n    async def broadcast_to_room(self, room_id: str, data: dict):\r\n        if room_id in self.active_connections:\r\n            message = json.dumps(data)\r\n            disconnected = []\r\n\r\n            for connection in self.active_connections[room_id]:\r\n                try:\r\n                    await connection.send_text(message)\r\n                except:\r\n                    disconnected.append(connection)\r\n\r\n            # Remove disconnected clients\r\n            for connection in disconnected:\r\n                self.active_connections[room_id].remove(connection)\r\n\r\n    async def send_typing_indicator(self, room_id: str, user_id: int, username: str, is_typing: bool):\r\n        await self.broadcast_to_room(room_id, {\r\n            \"type\": \"typing\",\r\n            \"user_id\": user_id,\r\n            \"username\": username,\r\n            \"is_typing\": is_typing,\r\n            \"timestamp\": datetime.utcnow().isoformat()\r\n        })\r\n\r\nmanager = ConnectionManager()\r\n\r\ndef get_db():\r\n    db = SessionLocal()\r\n    try:\r\n        yield db\r\n    finally:\r\n        db.close()\r\n\r\ndef verify_token(token: str):\r\n    \"\"\"Verify JWT token and return user info\"\"\"\r\n    try:\r\n        payload = jwt.decode(token, \"secret-key\", algorithms=[\"HS256\"])\r\n        return payload\r\n    except jwt.PyJWTError:\r\n        return None\r\n\r\n@app.websocket(\"/ws/{room_id}\")\r\nasync def websocket_endpoint(websocket: WebSocket, room_id: str, token: str):\r\n    # Verify authentication\r\n    user_data = verify_token(token)\r\n    if not user_data:\r\n        await websocket.close(code=4001, reason=\"Invalid token\")\r\n        return\r\n\r\n    user_id = user_data.get(\"user_id\")\r\n    username = user_data.get(\"username\")\r\n\r\n    await manager.connect(websocket, room_id, user_id)\r\n\r\n    try:\r\n        while True:\r\n            # Receive message from client\r\n            data = await websocket.receive_text()\r\n            message_data = json.loads(data)\r\n\r\n            if message_data[\"type\"] == \"message\":\r\n                # Save message to database\r\n                db = SessionLocal()\r\n                try:\r\n                    db_message = Message(\r\n                        room_id=int(room_id),\r\n                        user_id=user_id,\r\n                        username=username,\r\n                        content=message_data[\"content\"],\r\n                        message_type=message_data.get(\"message_type\", \"text\")\r\n                    )\r\n                    db.add(db_message)\r\n                    db.commit()\r\n                    db.refresh(db_message)\r\n\r\n                    # Broadcast to room\r\n                    await manager.broadcast_to_room(room_id, {\r\n                        \"type\": \"message\",\r\n                        \"id\": db_message.id,\r\n                        \"user_id\": user_id,\r\n                        \"username\": username,\r\n                        \"content\": message_data[\"content\"],\r\n                        \"message_type\": db_message.message_type,\r\n                        \"timestamp\": db_message.created_at.isoformat()\r\n                    })\r\n\r\n                finally:\r\n                    db.close()\r\n\r\n            elif message_data[\"type\"] == \"typing\":\r\n                await manager.send_typing_indicator(\r\n                    room_id, user_id, username, message_data[\"is_typing\"]\r\n                )\r\n\r\n            elif message_data[\"type\"] == \"ping\":\r\n                await websocket.send_text(json.dumps({\"type\": \"pong\"}))\r\n\r\n    except WebSocketDisconnect:\r\n        manager.disconnect(websocket, room_id, user_id)\r\n        await manager.broadcast_to_room(room_id, {\r\n            \"type\": \"user_left\",\r\n            \"user_id\": user_id,\r\n            \"username\": username,\r\n            \"timestamp\": datetime.utcnow().isoformat()\r\n        })\r\n\r\n@app.get(\"/rooms/{room_id}/messages\")\r\nasync def get_room_messages(\r\n    room_id: int,\r\n    skip: int = 0,\r\n    limit: int = 50,\r\n    db: Session = Depends(get_db)\r\n):\r\n    messages = db.query(Message).filter(Message.room_id == room_id)\\\r\n                .order_by(Message.created_at.desc())\\\r\n                .offset(skip).limit(limit).all()\r\n\r\n    return [\r\n        {\r\n            \"id\": msg.id,\r\n            \"user_id\": msg.user_id,\r\n            \"username\": msg.username,\r\n            \"content\": msg.content,\r\n            \"message_type\": msg.message_type,\r\n            \"timestamp\": msg.created_at.isoformat()\r\n        }\r\n        for msg in messages\r\n    ]\r\n\r\n@app.post(\"/rooms\")\r\nasync def create_room(name: str, description: str = \"\", db: Session = Depends(get_db)):\r\n    room = ChatRoom(name=name, description=description)\r\n    db.add(room)\r\n    db.commit()\r\n    db.refresh(room)\r\n    return {\"id\": room.id, \"name\": room.name, \"description\": room.description}\r\n\r\n@app.get(\"/rooms\")\r\nasync def get_rooms(db: Session = Depends(get_db)):\r\n    rooms = db.query(ChatRoom).all()\r\n    return [\r\n        {\r\n            \"id\": room.id,\r\n            \"name\": room.name,\r\n            \"description\": room.description,\r\n            \"active_users\": len(manager.active_connections.get(str(room.id), []))\r\n        }\r\n        for room in rooms\r\n    ]\r\n```\r\n\r\n### Chat Frontend (React/NextJS Example)\r\n\r\n```javascript\r\n// components/ChatRoom.js\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nconst ChatRoom = ({ roomId, token, username }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  const wsRef = useRef(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    connectWebSocket();\r\n    fetchPreviousMessages();\r\n\r\n    return () => {\r\n      if (wsRef.current) {\r\n        wsRef.current.close();\r\n      }\r\n    };\r\n  }, [roomId]);\r\n\r\n  const connectWebSocket = () => {\r\n    const ws = new WebSocket(`ws://localhost:8000/ws/${roomId}?token=${token}`);\r\n\r\n    ws.onopen = () => {\r\n      setIsConnected(true);\r\n      console.log(\"Connected to chat room\");\r\n    };\r\n\r\n    ws.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n\r\n      switch (data.type) {\r\n        case \"message\":\r\n          setMessages((prev) => [...prev, data]);\r\n          break;\r\n        case \"typing\":\r\n          if (data.is_typing && data.username !== username) {\r\n            setTypingUsers((prev) => [\r\n              ...prev.filter((u) => u !== data.username),\r\n              data.username,\r\n            ]);\r\n          } else {\r\n            setTypingUsers((prev) => prev.filter((u) => u !== data.username));\r\n          }\r\n          break;\r\n        case \"user_joined\":\r\n          console.log(\"User joined:\", data.user_id);\r\n          break;\r\n        case \"user_left\":\r\n          console.log(\"User left:\", data.username);\r\n          break;\r\n      }\r\n    };\r\n\r\n    ws.onclose = () => {\r\n      setIsConnected(false);\r\n      console.log(\"Disconnected from chat room\");\r\n\r\n      // Attempt to reconnect after 3 seconds\r\n      setTimeout(connectWebSocket, 3000);\r\n    };\r\n\r\n    wsRef.current = ws;\r\n  };\r\n\r\n  const fetchPreviousMessages = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8000/rooms/${roomId}/messages`\r\n      );\r\n      const data = await response.json();\r\n      setMessages(data.reverse());\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch messages:\", error);\r\n    }\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    if (newMessage.trim() && wsRef.current && isConnected) {\r\n      wsRef.current.send(\r\n        JSON.stringify({\r\n          type: \"message\",\r\n          content: newMessage.trim(),\r\n          message_type: \"text\",\r\n        })\r\n      );\r\n      setNewMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const sendTypingIndicator = (isTyping) => {\r\n    if (wsRef.current && isConnected) {\r\n      wsRef.current.send(\r\n        JSON.stringify({\r\n          type: \"typing\",\r\n          is_typing: isTyping,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"chat-room\">\r\n      <div className=\"chat-header\">\r\n        <h3>Chat Room {roomId}</h3>\r\n        <div\r\n          className={`connection-status ${isConnected ? \"connected\" : \"disconnected\"}`}\r\n        >\r\n          {isConnected ? \"üü¢ Connected\" : \"üî¥ Disconnected\"}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"messages-container\">\r\n        {messages.map((message) => (\r\n          <div\r\n            key={message.id}\r\n            className={`message ${message.username === username ? \"own\" : \"\"}`}\r\n          >\r\n            <div className=\"message-header\">\r\n              <strong>{message.username}</strong>\r\n              <span className=\"timestamp\">\r\n                {new Date(message.timestamp).toLocaleTimeString()}\r\n              </span>\r\n            </div>\r\n            <div className=\"message-content\">{message.content}</div>\r\n          </div>\r\n        ))}\r\n\r\n        {typingUsers.length > 0 && (\r\n          <div className=\"typing-indicator\">\r\n            {typingUsers.join(\", \")} {typingUsers.length === 1 ? \"is\" : \"are\"}{\" \"}\r\n            typing...\r\n          </div>\r\n        )}\r\n\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"message-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          onKeyPress={(e) => {\r\n            if (e.key === \"Enter\") {\r\n              sendMessage();\r\n              sendTypingIndicator(false);\r\n            }\r\n          }}\r\n          onFocus={() => sendTypingIndicator(true)}\r\n          onBlur={() => sendTypingIndicator(false)}\r\n          placeholder=\"Type a message...\"\r\n          disabled={!isConnected}\r\n        />\r\n        <button\r\n          onClick={sendMessage}\r\n          disabled={!isConnected || !newMessage.trim()}\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n```\r\n\r\n## üê≥ Containerization and Deployment\r\n\r\n### Production Dockerfile\r\n\r\n```dockerfile\r\n# Dockerfile.prod\r\nFROM python:3.11-slim as builder\r\n\r\nWORKDIR /app\r\n\r\n# Install build dependencies\r\nRUN apt-get update && apt-get install -y \\\r\n    build-essential \\\r\n    && rm -rf /var/lib/apt/lists/*\r\n\r\n# Copy requirements and install dependencies\r\nCOPY requirements.txt .\r\nRUN pip install --user --no-cache-dir -r requirements.txt\r\n\r\n# Production stage\r\nFROM python:3.11-slim\r\n\r\nWORKDIR /app\r\n\r\n# Create non-root user\r\nRUN groupadd -r appuser && useradd -r -g appuser appuser\r\n\r\n# Copy dependencies from builder stage\r\nCOPY --from=builder /root/.local /home/appuser/.local\r\n\r\n# Copy application code\r\nCOPY . .\r\n\r\n# Change ownership to appuser\r\nRUN chown -R appuser:appuser /app\r\n\r\n# Switch to non-root user\r\nUSER appuser\r\n\r\n# Add user's local bin to PATH\r\nENV PATH=/home/appuser/.local/bin:$PATH\r\n\r\n# Health check\r\nHEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\\r\n  CMD curl -f http://localhost:8000/health || exit 1\r\n\r\nEXPOSE 8000\r\n\r\nCMD [\"gunicorn\", \"main:app\", \"-w\", \"4\", \"-k\", \"uvicorn.workers.UvicornWorker\", \"--bind\", \"0.0.0.0:8000\"]\r\n```\r\n\r\n### Kubernetes Deployment\r\n\r\n```yaml\r\n# k8s/deployment.yaml\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: python-web-app\r\n  labels:\r\n    app: python-web-app\r\nspec:\r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      app: python-web-app\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: python-web-app\r\n    spec:\r\n      containers:\r\n        - name: web-app\r\n          image: myregistry/python-web-app:latest\r\n          ports:\r\n            - containerPort: 8000\r\n          env:\r\n            - name: DATABASE_URL\r\n              valueFrom:\r\n                secretKeyRef:\r\n                  name: app-secrets\r\n                  key: database-url\r\n            - name: REDIS_URL\r\n              value: \"redis://redis-service:6379\"\r\n          resources:\r\n            requests:\r\n              memory: \"256Mi\"\r\n              cpu: \"250m\"\r\n            limits:\r\n              memory: \"512Mi\"\r\n              cpu: \"500m\"\r\n          livenessProbe:\r\n            httpGet:\r\n              path: /health\r\n              port: 8000\r\n            initialDelaySeconds: 30\r\n            periodSeconds: 10\r\n          readinessProbe:\r\n            httpGet:\r\n              path: /health\r\n              port: 8000\r\n            initialDelaySeconds: 5\r\n            periodSeconds: 5\r\n\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: python-web-app-service\r\nspec:\r\n  selector:\r\n    app: python-web-app\r\n  ports:\r\n    - protocol: TCP\r\n      port: 80\r\n      targetPort: 8000\r\n  type: LoadBalancer\r\n```\r\n\r\n## üìä Monitoring and Observability\r\n\r\n### Prometheus Metrics\r\n\r\n```python\r\n# monitoring/metrics.py\r\nfrom prometheus_client import Counter, Histogram, Gauge, generate_latest\r\nfrom fastapi import FastAPI, Response\r\nimport time\r\nimport psutil\r\n\r\n# Metrics\r\nREQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint', 'status'])\r\nREQUEST_DURATION = Histogram('http_request_duration_seconds', 'HTTP request duration')\r\nACTIVE_CONNECTIONS = Gauge('websocket_connections_active', 'Active WebSocket connections')\r\nSYSTEM_MEMORY = Gauge('system_memory_usage_bytes', 'System memory usage')\r\nSYSTEM_CPU = Gauge('system_cpu_usage_percent', 'System CPU usage')\r\n\r\napp = FastAPI()\r\n\r\n@app.middleware(\"http\")\r\nasync def add_metrics_middleware(request, call_next):\r\n    start_time = time.time()\r\n\r\n    response = await call_next(request)\r\n\r\n    duration = time.time() - start_time\r\n    REQUEST_DURATION.observe(duration)\r\n    REQUEST_COUNT.labels(\r\n        method=request.method,\r\n        endpoint=request.url.path,\r\n        status=response.status_code\r\n    ).inc()\r\n\r\n    return response\r\n\r\n@app.get(\"/metrics\")\r\nasync def get_metrics():\r\n    # Update system metrics\r\n    SYSTEM_MEMORY.set(psutil.virtual_memory().used)\r\n    SYSTEM_CPU.set(psutil.cpu_percent())\r\n\r\n    return Response(generate_latest(), media_type=\"text/plain\")\r\n\r\n# Custom business metrics\r\nUSER_REGISTRATIONS = Counter('user_registrations_total', 'Total user registrations')\r\nORDERS_CREATED = Counter('orders_created_total', 'Total orders created')\r\nREVENUE_GENERATED = Counter('revenue_generated_total', 'Total revenue generated')\r\n\r\ndef track_user_registration():\r\n    USER_REGISTRATIONS.inc()\r\n\r\ndef track_order_created(amount: float):\r\n    ORDERS_CREATED.inc()\r\n    REVENUE_GENERATED.inc(amount)\r\n```\r\n\r\n### Structured Logging\r\n\r\n```python\r\n# logging_config.py\r\nimport logging\r\nimport json\r\nfrom datetime import datetime\r\nfrom typing import Any, Dict\r\n\r\nclass JSONFormatter(logging.Formatter):\r\n    def format(self, record: logging.LogRecord) -> str:\r\n        log_entry: Dict[str, Any] = {\r\n            \"timestamp\": datetime.utcnow().isoformat(),\r\n            \"level\": record.levelname,\r\n            \"logger\": record.name,\r\n            \"message\": record.getMessage(),\r\n            \"module\": record.module,\r\n            \"function\": record.funcName,\r\n            \"line\": record.lineno,\r\n        }\r\n\r\n        if hasattr(record, 'user_id'):\r\n            log_entry['user_id'] = record.user_id\r\n\r\n        if hasattr(record, 'request_id'):\r\n            log_entry['request_id'] = record.request_id\r\n\r\n        if record.exc_info:\r\n            log_entry['exception'] = self.formatException(record.exc_info)\r\n\r\n        return json.dumps(log_entry)\r\n\r\ndef setup_logging():\r\n    # Configure root logger\r\n    logging.basicConfig(\r\n        level=logging.INFO,\r\n        handlers=[\r\n            logging.StreamHandler(),\r\n            logging.FileHandler('app.log')\r\n        ]\r\n    )\r\n\r\n    # Apply JSON formatter\r\n    for handler in logging.root.handlers:\r\n        handler.setFormatter(JSONFormatter())\r\n\r\n# Usage\r\nlogger = logging.getLogger(__name__)\r\n\r\n# Log with context\r\ndef log_user_action(user_id: int, action: str, **kwargs):\r\n    logger.info(\r\n        f\"User action: {action}\",\r\n        extra={\"user_id\": user_id, **kwargs}\r\n    )\r\n```\r\n\r\n## üéØ Performance Optimization Tips for 2025\r\n\r\n### Async Best Practices\r\n\r\n```python\r\nimport asyncio\r\nimport aiohttp\r\nfrom typing import List\r\nimport asyncpg\r\n\r\n# Efficient database operations\r\nasync def get_users_efficiently(user_ids: List[int]):\r\n    \"\"\"Fetch multiple users in a single query\"\"\"\r\n    query = \"SELECT * FROM users WHERE id = ANY($1)\"\r\n\r\n    async with asyncpg.create_pool(\"postgresql://...\") as pool:\r\n        async with pool.acquire() as conn:\r\n            records = await conn.fetch(query, user_ids)\r\n            return [dict(record) for record in records]\r\n\r\n# Efficient HTTP requests\r\nasync def fetch_multiple_apis(urls: List[str]):\r\n    \"\"\"Fetch multiple APIs concurrently\"\"\"\r\n    async with aiohttp.ClientSession() as session:\r\n        tasks = [session.get(url) for url in urls]\r\n        responses = await asyncio.gather(*tasks, return_exceptions=True)\r\n\r\n        results = []\r\n        for response in responses:\r\n            if isinstance(response, Exception):\r\n                results.append({\"error\": str(response)})\r\n            else:\r\n                results.append(await response.json())\r\n\r\n        return results\r\n\r\n# Background task processing\r\nasync def process_background_tasks():\r\n    \"\"\"Process background tasks efficiently\"\"\"\r\n    tasks = await get_pending_tasks()\r\n\r\n    # Process in batches\r\n    batch_size = 10\r\n    for i in range(0, len(tasks), batch_size):\r\n        batch = tasks[i:i + batch_size]\r\n        await asyncio.gather(*[process_task(task) for task in batch])\r\n\r\n# Caching decorator\r\nfrom functools import wraps\r\nimport pickle\r\n\r\ndef async_cache(ttl: int = 300):\r\n    def decorator(func):\r\n        cache = {}\r\n\r\n        @wraps(func)\r\n        async def wrapper(*args, **kwargs):\r\n            key = pickle.dumps((args, kwargs))\r\n\r\n            if key in cache:\r\n                result, timestamp = cache[key]\r\n                if time.time() - timestamp < ttl:\r\n                    return result\r\n\r\n            result = await func(*args, **kwargs)\r\n            cache[key] = (result, time.time())\r\n            return result\r\n\r\n        return wrapper\r\n    return decorator\r\n\r\n@async_cache(ttl=600)\r\nasync def expensive_operation(param: str):\r\n    # Simulate expensive operation\r\n    await asyncio.sleep(2)\r\n    return f\"Result for {param}\"\r\n```\r\n\r\n## üöÄ Deployment Strategies for 2025\r\n\r\n### Blue-Green Deployment Script\r\n\r\n```python\r\n# deploy.py\r\nimport asyncio\r\nimport aiohttp\r\nimport time\r\nfrom typing import Dict, List\r\n\r\nclass BlueGreenDeployer:\r\n    def __init__(self, load_balancer_url: str, health_check_path: str = \"/health\"):\r\n        self.lb_url = load_balancer_url\r\n        self.health_path = health_check_path\r\n        self.environments = {\r\n            \"blue\": {\"url\": \"http://blue-env:8000\", \"active\": True},\r\n            \"green\": {\"url\": \"http://green-env:8000\", \"active\": False}\r\n        }\r\n\r\n    async def health_check(self, env_url: str) -> bool:\r\n        \"\"\"Check if environment is healthy\"\"\"\r\n        try:\r\n            async with aiohttp.ClientSession() as session:\r\n                async with session.get(f\"{env_url}{self.health_path}\", timeout=5) as response:\r\n                    return response.status == 200\r\n        except:\r\n            return False\r\n\r\n    async def deploy_to_inactive_environment(self, new_version: str):\r\n        \"\"\"Deploy new version to inactive environment\"\"\"\r\n        inactive_env = \"green\" if self.environments[\"blue\"][\"active\"] else \"blue\"\r\n\r\n        print(f\"Deploying version {new_version} to {inactive_env} environment...\")\r\n\r\n        # Deploy using Docker/Kubernetes\r\n        await self.deploy_container(inactive_env, new_version)\r\n\r\n        # Wait for deployment to complete\r\n        await asyncio.sleep(30)\r\n\r\n        # Health check\r\n        if await self.health_check(self.environments[inactive_env][\"url\"]):\r\n            print(f\"{inactive_env} environment is healthy\")\r\n            return inactive_env\r\n        else:\r\n            raise Exception(f\"{inactive_env} environment failed health check\")\r\n\r\n    async def switch_traffic(self, new_env: str):\r\n        \"\"\"Switch traffic to new environment\"\"\"\r\n        print(f\"Switching traffic to {new_env} environment...\")\r\n\r\n        # Update load balancer configuration\r\n        await self.update_load_balancer(new_env)\r\n\r\n        # Update environment status\r\n        for env in self.environments:\r\n            self.environments[env][\"active\"] = (env == new_env)\r\n\r\n        print(\"Traffic switch completed\")\r\n\r\n    async def rollback(self):\r\n        \"\"\"Rollback to previous environment\"\"\"\r\n        active_env = \"blue\" if self.environments[\"blue\"][\"active\"] else \"green\"\r\n        inactive_env = \"green\" if active_env == \"blue\" else \"blue\"\r\n\r\n        print(f\"Rolling back from {active_env} to {inactive_env}\")\r\n        await self.switch_traffic(inactive_env)\r\n\r\n    async def deploy_container(self, env: str, version: str):\r\n        \"\"\"Deploy container using Docker/K8s API\"\"\"\r\n        # Implementation depends on your container orchestration\r\n        print(f\"Deploying container {version} to {env}\")\r\n\r\n    async def update_load_balancer(self, active_env: str):\r\n        \"\"\"Update load balancer to point to active environment\"\"\"\r\n        # Implementation depends on your load balancer\r\n        print(f\"Load balancer updated to use {active_env}\")\r\n\r\n# Usage\r\nasync def main():\r\n    deployer = BlueGreenDeployer(\"http://load-balancer:80\")\r\n\r\n    try:\r\n        # Deploy new version\r\n        new_env = await deployer.deploy_to_inactive_environment(\"v1.2.0\")\r\n\r\n        # Switch traffic\r\n        await deployer.switch_traffic(new_env)\r\n\r\n        print(\"Deployment completed successfully!\")\r\n\r\n    except Exception as e:\r\n        print(f\"Deployment failed: {e}\")\r\n        await deployer.rollback()\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```\r\n\r\n## üéØ 2025 Web Development Career Guide\r\n\r\n### In-Demand Skills:\r\n\r\n- **FastAPI Mastery**: Modern async API development\r\n- **Microservices Architecture**: Docker, Kubernetes, service mesh\r\n- **Cloud Platforms**: AWS Lambda, Google Cloud Run, Azure Functions\r\n- **Observability**: Prometheus, Grafana, distributed tracing\r\n- **Security**: OAuth2, JWT, API security best practices\r\n\r\n### Salary Expectations (2025):\r\n\r\n- **Junior Python Developer**: $50,000 - $75,000\r\n- **Senior Backend Engineer**: $90,000 - $130,000\r\n- **Lead API Architect**: $120,000 - $180,000\r\n- **DevOps/Platform Engineer**: $110,000 - $160,000\r\n- **Full-Stack Python Developer**: $80,000 - $140,000\r\n\r\n### Portfolio Projects to Build:\r\n\r\n1. **E-commerce API**: Complete REST API with payments\r\n2. **Real-time Chat**: WebSocket implementation\r\n3. **Microservices Platform**: Multi-service architecture\r\n4. **API Gateway**: Load balancing and rate limiting\r\n5. **Monitoring Dashboard**: Metrics and observability\r\n\r\n## üî• Conclusion\r\n\r\nPython web development in 2025 is more powerful and accessible than ever. With FastAPI's performance, async programming capabilities, and modern deployment practices, Python developers are building the next generation of web applications.\r\n\r\nThe key to success is mastering the full stack: from FastAPI backends to containerized deployments, from real-time WebSockets to observability platforms. Start building these projects today and position yourself at the forefront of modern web development!\r\n\r\n---\r\n\r\n_Ready to build production-ready web applications? Join Zumenzu's advanced Python web development track and master FastAPI, microservices, and cloud deployment with hands-on projects!_\r\n",
    "category": "Web Development",
    "tags": "[\"python\",\"web development\",\"fastapi\",\"microservices\",\"apis\",\"docker\",\"cloud\",\"2025\"]",
    "featured": true,
    "readTime": "51 min",
    "estimatedMinutes": 5,
    "author": "Zumenzu Web Development Team",
    "seoKeywords": null,
    "metaDescription": null,
    "socialImageUrl": null,
    "isPublished": true,
    "publishedAt": "2025-08-10T22:22:53.564Z",
    "language": "tr"
  },
  {
    "title": "Introduction to Python Programming: From Zero to First Project 2025 Guide",
    "slug": "python-programming-introduction-guide",
    "description": "Learn Python programming language from scratch! Step-by-step guide from installation to your first project. Supported with examples, exercises and projects.",
    "excerpt": null,
    "content": "\r\n# Introduction to Python Programming: From Zero to First Project 2025 Guide\r\n\r\nDo you want to learn Python? You're in the right place! In this comprehensive guide, you'll learn Python programming language from scratch, write your first codes, and develop real projects. Even if you have no programming experience, you can master Python by following this guide.\r\n\r\n## üêç What is Python and Why Choose It?\r\n\r\nPython is a **readable**, **easy to learn** and **powerful** programming language developed by Guido van Rossum in 1991. It has become one of the world's most popular programming languages.\r\n\r\n### Advantages of Python:\r\n- ‚úÖ **Simple Syntax**: English-like structure\r\n- ‚úÖ **Multi-Purpose**: Web, data analysis, AI, automation\r\n- ‚úÖ **Large Community**: Support from millions of developers\r\n- ‚úÖ **Rich Libraries**: Ready solutions for every need\r\n- ‚úÖ **Platform Independent**: Works on Windows, Mac, Linux\r\n- ‚úÖ **High Salary**: Good job opportunities for Python developers\r\n\r\n### What Can You Do with Python?\r\n- üåê **Websites**: With Django, Flask\r\n- üìä **Data Analysis**: With Pandas, NumPy\r\n- ü§ñ **Artificial Intelligence**: With TensorFlow, PyTorch\r\n- üéÆ **Games**: With Pygame\r\n- üì± **Mobile Applications**: With Kivy\r\n- üîß **Automation Scripts**: Automating daily tasks\r\n\r\n## üöÄ Python Installation\r\n\r\n### Windows Installation\r\n1. Go to [python.org](https://python.org)\r\n2. Click \"Download Python 3.12\" button\r\n3. Run the downloaded `.exe` file\r\n4. Check **\"Add Python to PATH\"** checkbox ‚ö†Ô∏è IMPORTANT\r\n5. Click \"Install Now\" button\r\n\r\n### Mac Installation\r\n```bash\r\n# With Homebrew (recommended)\r\nbrew install python\r\n\r\n# or download and install from python.org\r\n```\r\n\r\n### Linux Installation\r\n```bash\r\n# Ubuntu/Debian\r\nsudo apt update\r\nsudo apt install python3 python3-pip\r\n\r\n# CentOS/RHEL\r\nsudo yum install python3 python3-pip\r\n```\r\n\r\n### Installation Check\r\n```bash\r\n# Run in Terminal/Command Prompt\r\npython --version\r\n# or\r\npython3 --version\r\n\r\n# Output: Python 3.12.0 (or similar)\r\n```\r\n\r\n## üíª Geli≈ütirme Ortamƒ± Hazƒ±rlƒ±ƒüƒ±\r\n\r\n### 1. Python IDE/Editor Se√ßimi\r\n\r\n**Yeni ba≈ülayanlar i√ßin √∂neriler:**\r\n- **VS Code** (√úcretsiz, pop√ºler)\r\n- **PyCharm Community** (√úcretsiz, g√º√ßl√º)\r\n- **IDLE** (Python ile gelir)\r\n- **Jupyter Notebook** (Veri analizi i√ßin)\r\n\r\n### 2. VS Code Kurulumu ve Ayarlarƒ±\r\n```bash\r\n# VS Code'u indirin: https://code.visualstudio.com/\r\n# Python extension'ƒ±nƒ± kurun\r\n```\r\n\r\n**Gerekli Extension'lar:**\r\n- Python (Microsoft)\r\n- Python Docstring Generator\r\n- Code Runner\r\n- Python Indent\r\n\r\n### 3. ƒ∞lk Python Dosyanƒ±z\r\n1. VS Code'u a√ßƒ±n\r\n2. Yeni dosya olu≈üturun: `ilk_program.py`\r\n3. A≈üaƒüƒ±daki kodu yazƒ±n:\r\n\r\n```python\r\nprint(\"Hello, Python World!\")\r\nprint(\"I'm learning Python üêç\")\r\n```\r\n\r\n4. `Ctrl+F5` ile √ßalƒ±≈ütƒ±rƒ±n\r\n\r\n## üìö Python Basic Concepts\r\n\r\n### 1. Variables\r\nVariables are used to store data in memory.\r\n\r\n```python\r\n# Variable definition\r\nname = \"John\"\r\nage = 25\r\nheight = 1.75\r\nis_student = True\r\n\r\n# Printing variables\r\nprint(\"Name:\", name)\r\nprint(\"Age:\", age)\r\nprint(\"Height:\", height)\r\nprint(\"Is student?\", is_student)\r\n\r\n# Learning variable types\r\nprint(type(name))    # <class 'str'>\r\nprint(type(age))     # <class 'int'>\r\nprint(type(height))     # <class 'float'>\r\nprint(type(is_student))  # <class 'bool'>\r\n```\r\n\r\n### 2. Data Types\r\n\r\n#### String (Text)\r\n```python\r\n# String definition\r\nfirst_name = \"Python\"\r\nlast_name = 'Programmer'\r\nmessage = \"\"\"This is a\r\nmulti-line\r\nstring.\"\"\"\r\n\r\n# String operations\r\nfull_name = first_name + \" \" + last_name  # Concatenation\r\nprint(full_name.upper())      # PYTHON PROGRAMMER\r\nprint(full_name.lower())      # python programmer\r\nprint(len(full_name))         # String length\r\n\r\n# String formatting\r\nprint(f\"Hello, I am {full_name}\")\r\nprint(\"My age is {} and height is {}\".format(age, height))\r\n```\r\n\r\n#### Number (Numbers)\r\n```python\r\n# Integer (Whole number)\r\nnum1 = 42\r\nnum2 = -17\r\n\r\n# Float (Decimal number)\r\npi = 3.14159\r\ntemperature = -5.5\r\n\r\n# Mathematical operations\r\nsum_result = num1 + num2       # Addition\r\ndifference = num1 - num2       # Subtraction\r\nproduct = num1 * num2          # Multiplication\r\ndivision = num1 / num2         # Division\r\nremainder = num1 % num2        # Modulo (remainder)\r\npower = num1 ** 2              # Exponentiation\r\n\r\nprint(f\"Sum: {sum_result}\")\r\nprint(f\"Product: {product}\")\r\nprint(f\"42 squared: {power}\")\r\n```\r\n\r\n#### Boolean (True/False)\r\n```python\r\n# Boolean values\r\ntrue_val = True\r\nfalse_val = False\r\n\r\n# Boolean operations\r\nresult1 = 5 > 3        # True\r\nresult2 = 10 == 5      # False\r\nresult3 = \"python\" in \"python programming\"  # True\r\n\r\nprint(f\"5 > 3: {result1}\")\r\nprint(f\"10 == 5: {result2}\")\r\n```\r\n\r\n### 3. Lists\r\nLists are used to store multiple items.\r\n\r\n```python\r\n# Creating lists\r\nfruits = [\"apple\", \"pear\", \"banana\", \"grape\"]\r\nnumbers = [1, 2, 3, 4, 5]\r\nmixed = [\"Python\", 42, True, 3.14]\r\n\r\n# Accessing list elements\r\nprint(fruits[0])    # apple (first element)\r\nprint(fruits[-1])   # grape (last element)\r\nprint(fruits[1:3])  # ['pear', 'banana'] (slice)\r\n\r\n# List operations\r\nfruits.append(\"cherry\")        # Adding element\r\nfruits.remove(\"pear\")          # Removing element\r\nfruits.insert(1, \"orange\")     # Adding to specific position\r\n\r\nprint(\"Current fruit list:\", fruits)\r\nprint(\"List length:\", len(fruits))\r\n\r\n# Looping through list\r\nfor fruit in fruits:\r\n    print(f\"My favorite fruit: {fruit}\")\r\n```\r\n\r\n### 4. S√∂zl√ºkler (Dictionaries)\r\nS√∂zl√ºkler, key-value √ßiftlerini saklar.\r\n\r\n```python\r\n# S√∂zl√ºk olu≈üturma\r\nogrenci = {\r\n    \"ad\": \"Ay≈üe\",\r\n    \"soyad\": \"Yƒ±lmaz\", \r\n    \"yas\": 22,\r\n    \"bolum\": \"Bilgisayar M√ºhendisliƒüi\",\r\n    \"notlar\": [85, 92, 78, 95]\r\n}\r\n\r\n# S√∂zl√ºk elemanlarƒ±na eri≈üim\r\nprint(ogrenci[\"ad\"])           # Ay≈üe\r\nprint(ogrenci[\"notlar\"][0])    # 85\r\n\r\n# Yeni eleman ekleme/g√ºncelleme\r\nogrenci[\"sehir\"] = \"ƒ∞stanbul\"\r\nogrenci[\"yas\"] = 23\r\n\r\n# S√∂zl√ºk metodlarƒ±\r\nprint(ogrenci.keys())      # Anahtarlarƒ± g√∂ster\r\nprint(ogrenci.values())    # Deƒüerleri g√∂ster\r\nprint(ogrenci.items())     # Key-value √ßiftleri\r\n\r\n# S√∂zl√ºk √ºzerinde d√∂ng√º\r\nfor anahtar, deger in ogrenci.items():\r\n    print(f\"{anahtar}: {deger}\")\r\n```\r\n\r\n## üéØ Kontrol Yapƒ±larƒ±\r\n\r\n### 1. If-Else Ko≈üullarƒ±\r\n```python\r\n# Basit if-else\r\nyas = int(input(\"Ya≈üƒ±nƒ±zƒ± girin: \"))\r\n\r\nif yas >= 18:\r\n    print(\"Yeti≈ükinsiniz!\")\r\nelse:\r\n    print(\"Hen√ºz re≈üit deƒüilsiniz.\")\r\n\r\n# √áoklu ko≈üullar\r\nnot_ortalamasi = float(input(\"Not ortalamanƒ±zƒ± girin: \"))\r\n\r\nif not_ortalamasi >= 90:\r\n    harf_notu = \"AA\"\r\nelif not_ortalamasi >= 80:\r\n    harf_notu = \"BA\"\r\nelif not_ortalamasi >= 70:\r\n    harf_notu = \"BB\"\r\nelif not_ortalamasi >= 60:\r\n    harf_notu = \"CB\"\r\nelse:\r\n    harf_notu = \"FF\"\r\n\r\nprint(f\"Harf notunuz: {harf_notu}\")\r\n\r\n# Mantƒ±ksal operat√∂rler\r\nkullanici_adi = input(\"Kullanƒ±cƒ± adƒ±: \")\r\nsifre = input(\"≈ûifre: \")\r\n\r\nif kullanici_adi == \"admin\" and sifre == \"123456\":\r\n    print(\"Giri≈ü ba≈üarƒ±lƒ±!\")\r\nelif kullanici_adi == \"admin\" or sifre == \"123456\":\r\n    print(\"Kullanƒ±cƒ± adƒ± veya ≈üifre hatalƒ±!\")\r\nelse:\r\n    print(\"Ge√ßersiz giri≈ü!\")\r\n```\r\n\r\n### 2. D√∂ng√ºler (Loops)\r\n\r\n#### For D√∂ng√ºs√º\r\n```python\r\n# Sayƒ± dizisi √ºzerinde d√∂ng√º\r\nfor i in range(1, 6):  # 1, 2, 3, 4, 5\r\n    print(f\"Sayƒ±: {i}\")\r\n\r\n# Liste √ºzerinde d√∂ng√º\r\nprogramlama_dilleri = [\"Python\", \"JavaScript\", \"Java\", \"C++\"]\r\n\r\nfor dil in programlama_dilleri:\r\n    print(f\"√ñƒürenmek istediƒüim dil: {dil}\")\r\n\r\n# Enumerate ile index ve deƒüer\r\nfor index, dil in enumerate(programlama_dilleri):\r\n    print(f\"{index + 1}. {dil}\")\r\n\r\n# √áarpƒ±m tablosu √∂rneƒüi\r\nsayi = int(input(\"Hangi sayƒ±nƒ±n √ßarpƒ±m tablosunu istersiniz? \"))\r\n\r\nfor i in range(1, 11):\r\n    sonuc = sayi * i\r\n    print(f\"{sayi} x {i} = {sonuc}\")\r\n```\r\n\r\n#### While D√∂ng√ºs√º\r\n```python\r\n# Basit while d√∂ng√ºs√º\r\nsayac = 1\r\nwhile sayac <= 5:\r\n    print(f\"Saya√ß: {sayac}\")\r\n    sayac += 1\r\n\r\n# Kullanƒ±cƒ± giri≈üi ile while\r\ntoplam = 0\r\nwhile True:\r\n    sayi = input(\"Bir sayƒ± girin (√ßƒ±kmak i√ßin 'q'): \")\r\n    \r\n    if sayi.lower() == 'q':\r\n        break\r\n    \r\n    try:\r\n        toplam += int(sayi)\r\n        print(f\"≈ûu anki toplam: {toplam}\")\r\n    except ValueError:\r\n        print(\"L√ºtfen ge√ßerli bir sayƒ± girin!\")\r\n\r\nprint(f\"Final toplam: {toplam}\")\r\n```\r\n\r\n## üîß Fonksiyonlar (Functions)\r\n\r\n### Temel Fonksiyon Yazƒ±mƒ±\r\n```python\r\n# Basit fonksiyon\r\ndef selamla():\r\n    print(\"Merhaba! Python √∂ƒüreniyorum!\")\r\n\r\n# Fonksiyonu √ßaƒüƒ±rma\r\nselamla()\r\n\r\n# Parametreli fonksiyon\r\ndef selamla_kisisel(isim):\r\n    print(f\"Merhaba {isim}! Python'a ho≈ü geldin!\")\r\n\r\nselamla_kisisel(\"Ahmet\")\r\nselamla_kisisel(\"Fatma\")\r\n\r\n# Deƒüer d√∂nd√ºren fonksiyon\r\ndef kare_al(sayi):\r\n    return sayi ** 2\r\n\r\nsonuc = kare_al(5)\r\nprint(f\"5'in karesi: {sonuc}\")\r\n\r\n# √áoklu parametre\r\ndef toplama(a, b):\r\n    return a + b\r\n\r\ndef carpma(a, b):\r\n    return a * b\r\n\r\nprint(f\"8 + 3 = {toplama(8, 3)}\")\r\nprint(f\"8 x 3 = {carpma(8, 3)}\")\r\n```\r\n\r\n### Geli≈ümi≈ü Fonksiyon √ñrnekleri\r\n```python\r\n# Default parametre\r\ndef tanit(isim, yas=18, sehir=\"Bilinmiyor\"):\r\n    return f\"Adƒ±m {isim}, {yas} ya≈üƒ±ndayƒ±m ve {sehir}'de ya≈üƒ±yorum.\"\r\n\r\nprint(tanit(\"Ali\"))\r\nprint(tanit(\"Ay≈üe\", 25))\r\nprint(tanit(\"Mehmet\", 30, \"ƒ∞stanbul\"))\r\n\r\n# √áoklu deƒüer d√∂nd√ºrme\r\ndef hesapla(a, b):\r\n    toplam = a + b\r\n    fark = a - b\r\n    carpim = a * b\r\n    return toplam, fark, carpim\r\n\r\nt, f, c = hesapla(10, 3)\r\nprint(f\"Toplam: {t}, Fark: {f}, √áarpƒ±m: {c}\")\r\n\r\n# Liste ile √ßalƒ±≈üan fonksiyon\r\ndef liste_istatistikleri(sayilar):\r\n    toplam = sum(sayilar)\r\n    ortalama = toplam / len(sayilar)\r\n    en_buyuk = max(sayilar)\r\n    en_kucuk = min(sayilar)\r\n    \r\n    return {\r\n        \"toplam\": toplam,\r\n        \"ortalama\": ortalama,\r\n        \"en_buyuk\": en_buyuk,\r\n        \"en_kucuk\": en_kucuk\r\n    }\r\n\r\nnotlar = [85, 92, 78, 95, 88]\r\nistatistikler = liste_istatistikleri(notlar)\r\n\r\nfor anahtar, deger in istatistikler.items():\r\n    print(f\"{anahtar}: {deger}\")\r\n```\r\n\r\n## üõ†Ô∏è Pratik Projeler\r\n\r\n### Proje 1: Hesap Makinesi\r\n```python\r\ndef hesap_makinesi():\r\n    print(\"=== PYTHON HESAP MAKƒ∞NESƒ∞ ===\")\r\n    print(\"ƒ∞≈ülemler: +, -, *, /, ** (√ºs), % (mod)\")\r\n    \r\n    while True:\r\n        try:\r\n            sayi1 = float(input(\"\\nBirinci sayƒ±yƒ± girin: \"))\r\n            islem = input(\"ƒ∞≈ülemi girin (+, -, *, /, **, %): \")\r\n            sayi2 = float(input(\"ƒ∞kinci sayƒ±yƒ± girin: \"))\r\n            \r\n            if islem == '+':\r\n                sonuc = sayi1 + sayi2\r\n            elif islem == '-':\r\n                sonuc = sayi1 - sayi2\r\n            elif islem == '*':\r\n                sonuc = sayi1 * sayi2\r\n            elif islem == '/':\r\n                if sayi2 == 0:\r\n                    print(\"Hata: Sƒ±fƒ±ra b√∂lme!\")\r\n                    continue\r\n                sonuc = sayi1 / sayi2\r\n            elif islem == '**':\r\n                sonuc = sayi1 ** sayi2\r\n            elif islem == '%':\r\n                sonuc = sayi1 % sayi2\r\n            else:\r\n                print(\"Ge√ßersiz i≈ülem!\")\r\n                continue\r\n            \r\n            print(f\"Sonu√ß: {sayi1} {islem} {sayi2} = {sonuc}\")\r\n            \r\n            devam = input(\"\\nBa≈üka i≈ülem yapmak ister misiniz? (e/h): \")\r\n            if devam.lower() != 'e':\r\n                print(\"Hesap makinesi kapatƒ±lƒ±yor...\")\r\n                break\r\n                \r\n        except ValueError:\r\n            print(\"Hata: L√ºtfen ge√ßerli bir sayƒ± girin!\")\r\n\r\n# Programƒ± √ßalƒ±≈ütƒ±r\r\nhesap_makinesi()\r\n```\r\n\r\n### Proje 2: Kelime Tahmin Oyunu\r\n```python\r\nimport random\r\n\r\ndef kelime_tahmin_oyunu():\r\n    kelimeler = [\r\n        \"python\", \"programlama\", \"bilgisayar\", \"yazilim\", \r\n        \"teknoloji\", \"internet\", \"yapay\", \"veri\", \"algoritma\"\r\n    ]\r\n    \r\n    kelime = random.choice(kelimeler)\r\n    tahmin_edilen = ['_'] * len(kelime)\r\n    yanlis_tahminler = []\r\n    max_yanlis = 6\r\n    \r\n    print(\"=== KELƒ∞ME TAHMƒ∞N OYUNU ===\")\r\n    print(f\"Kelime {len(kelime)} harflidir.\")\r\n    print(\"Tahmin edilen kelime:\", ' '.join(tahmin_edilen))\r\n    \r\n    while True:\r\n        # Mevcut durumu g√∂ster\r\n        print(f\"\\nTahmin edilen: {' '.join(tahmin_edilen)}\")\r\n        print(f\"Yanlƒ±≈ü tahminler: {', '.join(yanlis_tahminler)}\")\r\n        print(f\"Kalan hak: {max_yanlis - len(yanlis_tahminler)}\")\r\n        \r\n        # Kazanma kontrol√º\r\n        if '_' not in tahmin_edilen:\r\n            print(f\"\\nüéâ Tebrikler! Kelimeyi buldunuz: {kelime}\")\r\n            break\r\n        \r\n        # Kaybetme kontrol√º\r\n        if len(yanlis_tahminler) >= max_yanlis:\r\n            print(f\"\\nüòû Kaybettiniz! Kelime: {kelime}\")\r\n            break\r\n        \r\n        # Harf tahmin al\r\n        harf = input(\"Bir harf tahmin edin: \").lower()\r\n        \r\n        if len(harf) != 1 or not harf.isalpha():\r\n            print(\"L√ºtfen tek bir harf girin!\")\r\n            continue\r\n        \r\n        if harf in tahmin_edilen or harf in yanlis_tahminler:\r\n            print(\"Bu harfi zaten tahmin ettiniz!\")\r\n            continue\r\n        \r\n        # Harf kontrol√º\r\n        if harf in kelime:\r\n            print(f\"‚úÖ Doƒüru! '{harf}' harfi kelimede var.\")\r\n            for i, char in enumerate(kelime):\r\n                if char == harf:\r\n                    tahmin_edilen[i] = harf\r\n        else:\r\n            print(f\"‚ùå Yanlƒ±≈ü! '{harf}' harfi kelimede yok.\")\r\n            yanlis_tahminler.append(harf)\r\n\r\n# Oyunu ba≈ülat\r\nkelime_tahmin_oyunu()\r\n```\r\n\r\n### Proje 3: √ñƒürenci Not Sistemi\r\n```python\r\nclass OgrenciNotSistemi:\r\n    def __init__(self):\r\n        self.ogrenciler = {}\r\n    \r\n    def ogrenci_ekle(self, ad, soyad):\r\n        ogrenci_id = len(self.ogrenciler) + 1\r\n        self.ogrenciler[ogrenci_id] = {\r\n            'ad': ad,\r\n            'soyad': soyad,\r\n            'notlar': []\r\n        }\r\n        print(f\"‚úÖ {ad} {soyad} ba≈üarƒ±yla eklendi. ID: {ogrenci_id}\")\r\n        return ogrenci_id\r\n    \r\n    def not_ekle(self, ogrenci_id, ders, not_degeri):\r\n        if ogrenci_id in self.ogrenciler:\r\n            if 0 <= not_degeri <= 100:\r\n                self.ogrenciler[ogrenci_id]['notlar'].append({\r\n                    'ders': ders,\r\n                    'not': not_degeri\r\n                })\r\n                print(f\"‚úÖ Not eklendi: {ders} - {not_degeri}\")\r\n            else:\r\n                print(\"‚ùå Not 0-100 arasƒ±nda olmalƒ±dƒ±r!\")\r\n        else:\r\n            print(\"‚ùå √ñƒürenci bulunamadƒ±!\")\r\n    \r\n    def ortalama_hesapla(self, ogrenci_id):\r\n        if ogrenci_id in self.ogrenciler:\r\n            notlar = self.ogrenciler[ogrenci_id]['notlar']\r\n            if notlar:\r\n                toplam = sum([n['not'] for n in notlar])\r\n                ortalama = toplam / len(notlar)\r\n                return ortalama\r\n            else:\r\n                return 0\r\n        return None\r\n    \r\n    def ogrenci_raporu(self, ogrenci_id):\r\n        if ogrenci_id in self.ogrenciler:\r\n            ogrenci = self.ogrenciler[ogrenci_id]\r\n            print(f\"\\n=== {ogrenci['ad']} {ogrenci['soyad']} RAPORU ===\")\r\n            \r\n            if ogrenci['notlar']:\r\n                for not_bilgisi in ogrenci['notlar']:\r\n                    print(f\"{not_bilgisi['ders']}: {not_bilgisi['not']}\")\r\n                \r\n                ortalama = self.ortalama_hesapla(ogrenci_id)\r\n                print(f\"\\nOrtalama: {ortalama:.2f}\")\r\n                \r\n                if ortalama >= 85:\r\n                    print(\"Ba≈üarƒ± Durumu: Pekiyi üåü\")\r\n                elif ortalama >= 70:\r\n                    print(\"Ba≈üarƒ± Durumu: ƒ∞yi üëç\")\r\n                elif ortalama >= 60:\r\n                    print(\"Ba≈üarƒ± Durumu: Orta üìö\")\r\n                else:\r\n                    print(\"Ba≈üarƒ± Durumu: Ge√ßersiz ‚ùå\")\r\n            else:\r\n                print(\"Hen√ºz not girilmemi≈ü.\")\r\n        else:\r\n            print(\"‚ùå √ñƒürenci bulunamadƒ±!\")\r\n    \r\n    def tum_ogrenciler(self):\r\n        print(\"\\n=== T√úM √ñƒûRENCƒ∞LER ===\")\r\n        for ogrenci_id, bilgi in self.ogrenciler.items():\r\n            ortalama = self.ortalama_hesapla(ogrenci_id)\r\n            print(f\"ID: {ogrenci_id} - {bilgi['ad']} {bilgi['soyad']} - Ortalama: {ortalama:.2f}\")\r\n\r\n# Sistem kullanƒ±mƒ± √∂rneƒüi\r\ndef not_sistemi_demo():\r\n    sistem = OgrenciNotSistemi()\r\n    \r\n    # √ñrnek √∂ƒürenciler ekle\r\n    id1 = sistem.ogrenci_ekle(\"Ahmet\", \"Yƒ±lmaz\")\r\n    id2 = sistem.ogrenci_ekle(\"Ay≈üe\", \"Kaya\")\r\n    \r\n    # Notlar ekle\r\n    sistem.not_ekle(id1, \"Matematik\", 85)\r\n    sistem.not_ekle(id1, \"Fizik\", 92)\r\n    sistem.not_ekle(id1, \"Kimya\", 78)\r\n    \r\n    sistem.not_ekle(id2, \"Matematik\", 95)\r\n    sistem.not_ekle(id2, \"Fizik\", 88)\r\n    sistem.not_ekle(id2, \"Kimya\", 91)\r\n    \r\n    # Raporlarƒ± g√∂ster\r\n    sistem.ogrenci_raporu(id1)\r\n    sistem.ogrenci_raporu(id2)\r\n    sistem.tum_ogrenciler()\r\n\r\n# Demo'yu √ßalƒ±≈ütƒ±r\r\nnot_sistemi_demo()\r\n```\r\n\r\n## üìÅ Dosya ƒ∞≈ülemleri\r\n\r\n### Dosya Okuma ve Yazma\r\n```python\r\n# Dosyaya yazma\r\ndef dosya_yaz():\r\n    with open('notlar.txt', 'w', encoding='utf-8') as dosya:\r\n        dosya.write(\"Python √∂ƒüreniyorum!\\n\")\r\n        dosya.write(\"Dosya i≈ülemleri √ßok faydalƒ±.\\n\")\r\n        dosya.write(\"Bu benim ilk dosya yazma deneyimim.\\n\")\r\n    print(\"‚úÖ Dosya ba≈üarƒ±yla olu≈üturuldu!\")\r\n\r\n# Dosya okuma\r\ndef dosya_oku():\r\n    try:\r\n        with open('notlar.txt', 'r', encoding='utf-8') as dosya:\r\n            icerik = dosya.read()\r\n            print(\"üìÑ Dosya i√ßeriƒüi:\")\r\n            print(icerik)\r\n    except FileNotFoundError:\r\n        print(\"‚ùå Dosya bulunamadƒ±!\")\r\n\r\n# Satƒ±r satƒ±r okuma\r\ndef dosya_satirlar():\r\n    try:\r\n        with open('notlar.txt', 'r', encoding='utf-8') as dosya:\r\n            for satir_no, satir in enumerate(dosya, 1):\r\n                print(f\"{satir_no}: {satir.strip()}\")\r\n    except FileNotFoundError:\r\n        print(\"‚ùå Dosya bulunamadƒ±!\")\r\n\r\n# CSV benzeri veri i≈üleme\r\ndef ogrenci_kayit_sistemi():\r\n    def kayit_ekle(ad, soyad, yas, bolum):\r\n        with open('ogrenciler.txt', 'a', encoding='utf-8') as dosya:\r\n            dosya.write(f\"{ad},{soyad},{yas},{bolum}\\n\")\r\n        print(f\"‚úÖ {ad} {soyad} kaydedildi!\")\r\n    \r\n    def kayitlari_goster():\r\n        try:\r\n            with open('ogrenciler.txt', 'r', encoding='utf-8') as dosya:\r\n                print(\"\\n=== √ñƒûRENCƒ∞ KAYITLARI ===\")\r\n                for satir_no, satir in enumerate(dosya, 1):\r\n                    bilgiler = satir.strip().split(',')\r\n                    if len(bilgiler) == 4:\r\n                        print(f\"{satir_no}. {bilgiler[0]} {bilgiler[1]} - {bilgiler[2]} ya≈ü - {bilgiler[3]}\")\r\n        except FileNotFoundError:\r\n            print(\"‚ùå Hen√ºz kayƒ±t yok!\")\r\n    \r\n    # √ñrnek kullanƒ±m\r\n    kayit_ekle(\"Ahmet\", \"Yƒ±lmaz\", \"22\", \"Bilgisayar M√ºhendisliƒüi\")\r\n    kayit_ekle(\"Ay≈üe\", \"Kaya\", \"21\", \"Matematik\")\r\n    kayitlari_goster()\r\n\r\n# Fonksiyonlarƒ± test et\r\ndosya_yaz()\r\ndosya_oku()\r\nogrenci_kayit_sistemi()\r\n```\r\n\r\n## üêõ Hata Y√∂netimi (Error Handling)\r\n\r\n### Try-Except Kullanƒ±mƒ±\r\n```python\r\n# Basit hata yakalama\r\ndef guvenli_bolme():\r\n    try:\r\n        sayi1 = float(input(\"Birinci sayƒ±: \"))\r\n        sayi2 = float(input(\"ƒ∞kinci sayƒ±: \"))\r\n        sonuc = sayi1 / sayi2\r\n        print(f\"Sonu√ß: {sonuc}\")\r\n    except ZeroDivisionError:\r\n        print(\"‚ùå Hata: Sƒ±fƒ±ra b√∂lme yapƒ±lamaz!\")\r\n    except ValueError:\r\n        print(\"‚ùå Hata: L√ºtfen ge√ßerli bir sayƒ± girin!\")\r\n    except Exception as e:\r\n        print(f\"‚ùå Beklenmeyen hata: {e}\")\r\n\r\n# √áoklu hata t√ºr√º\r\ndef dosya_islemleri():\r\n    dosya_adi = input(\"Dosya adƒ±nƒ± girin: \")\r\n    \r\n    try:\r\n        with open(dosya_adi, 'r', encoding='utf-8') as dosya:\r\n            icerik = dosya.read()\r\n            print(f\"Dosya uzunluƒüu: {len(icerik)} karakter\")\r\n            \r\n    except FileNotFoundError:\r\n        print(f\"‚ùå '{dosya_adi}' dosyasƒ± bulunamadƒ±!\")\r\n        \r\n        # Dosya olu≈ütur\r\n        cevap = input(\"Dosyayƒ± olu≈üturmak ister misiniz? (e/h): \")\r\n        if cevap.lower() == 'e':\r\n            with open(dosya_adi, 'w', encoding='utf-8') as yeni_dosya:\r\n                yeni_dosya.write(\"Bu dosya Python tarafƒ±ndan olu≈üturuldu.\\n\")\r\n            print(f\"‚úÖ '{dosya_adi}' dosyasƒ± olu≈üturuldu!\")\r\n            \r\n    except PermissionError:\r\n        print(\"‚ùå Dosyaya eri≈üim izniniz yok!\")\r\n    except Exception as e:\r\n        print(f\"‚ùå Hata: {e}\")\r\n\r\n# Finally bloƒüu\r\ndef temizlik_ornegi():\r\n    dosya = None\r\n    try:\r\n        dosya = open('test.txt', 'w')\r\n        dosya.write(\"Test verisi\")\r\n        # Burada bir hata olabilir\r\n        \r\n    except Exception as e:\r\n        print(f\"Hata olu≈ütu: {e}\")\r\n        \r\n    finally:\r\n        # Her durumda √ßalƒ±≈üƒ±r\r\n        if dosya:\r\n            dosya.close()\r\n            print(\"Dosya kapatƒ±ldƒ±.\")\r\n\r\nguvenli_bolme()\r\n```\r\n\r\n## üéØ En ƒ∞yi Uygulamalar ve ƒ∞pu√ßlarƒ±\r\n\r\n### Kod Yazƒ±m Kurallarƒ±\r\n```python\r\n# ƒ∞yi kod yazƒ±m √∂rnekleri\r\n\r\n# 1. Anlamlƒ± deƒüi≈üken isimleri\r\n# K√∂t√º\r\na = 25\r\nb = \"Ahmet\"\r\n\r\n# ƒ∞yi\r\nyas = 25\r\nogrenci_adi = \"Ahmet\"\r\n\r\n# 2. Fonksiyon dok√ºmantasyonu\r\ndef hesapla_ortalama(notlar):\r\n    \"\"\"\r\n    Verilen notlarƒ±n ortalamasƒ±nƒ± hesaplar.\r\n    \r\n    Args:\r\n        notlar (list): Not listesi\r\n        \r\n    Returns:\r\n        float: Ortalama deƒüer\r\n    \"\"\"\r\n    if not notlar:\r\n        return 0\r\n    return sum(notlar) / len(notlar)\r\n\r\n# 3. Sabitler b√ºy√ºk harfle\r\nPI = 3.14159\r\nMAX_DENEME = 3\r\nVARSAYILAN_PORT = 8080\r\n\r\n# 4. Liste comprehension\r\n# Geleneksel y√∂ntem\r\nkareler = []\r\nfor i in range(1, 6):\r\n    kareler.append(i ** 2)\r\n\r\n# Pythonic y√∂ntem\r\nkareler = [i ** 2 for i in range(1, 6)]\r\n\r\n# 5. Ko≈üullu liste comprehension\r\ncift_sayilar = [x for x in range(1, 21) if x % 2 == 0]\r\nprint(cift_sayilar)  # [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\r\n```\r\n\r\n### Performans ƒ∞pu√ßlarƒ±\r\n```python\r\n# 1. String birle≈ütirme\r\n# Yava≈ü\r\nmetin = \"\"\r\nfor i in range(1000):\r\n    metin += str(i)\r\n\r\n# Hƒ±zlƒ±\r\nmetin = \"\".join(str(i) for i in range(1000))\r\n\r\n# 2. Listede arama\r\n# Yava≈ü (liste)\r\nbuyuk_liste = list(range(10000))\r\nif 5000 in buyuk_liste:\r\n    print(\"Bulundu\")\r\n\r\n# Hƒ±zlƒ± (set)\r\nbuyuk_set = set(range(10000))\r\nif 5000 in buyuk_set:\r\n    print(\"Bulundu\")\r\n\r\n# 3. Enumerate kullanƒ±mƒ±\r\nkelimeler = [\"python\", \"java\", \"javascript\"]\r\n\r\n# Geleneksel\r\nfor i in range(len(kelimeler)):\r\n    print(f\"{i}: {kelimeler[i]}\")\r\n\r\n# Pythonic\r\nfor i, kelime in enumerate(kelimeler):\r\n    print(f\"{i}: {kelime}\")\r\n```\r\n\r\n## üöÄ Sonraki Adƒ±mlar\r\n\r\n### Python'da Uzmanla≈üma Yollarƒ±\r\n\r\n#### 1. Web Geli≈ütirme\r\n```python\r\n# Flask ile basit web uygulamasƒ±\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/')\r\ndef anasayfa():\r\n    return '<h1>Python Web Uygulamam!</h1>'\r\n\r\n@app.route('/hakkinda')\r\ndef hakkinda():\r\n    return '<h2>Bu uygulama Python Flask ile yapƒ±ldƒ±.</h2>'\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n```\r\n\r\n#### 2. Veri Analizi\r\n```python\r\n# Pandas ile basit veri analizi\r\nimport pandas as pd\r\n\r\n# CSV dosyasƒ± okuma\r\n# df = pd.read_csv('veriler.csv')\r\n\r\n# √ñrnek veri olu≈üturma\r\nveriler = {\r\n    'isim': ['Ahmet', 'Ay≈üe', 'Mehmet', 'Fatma'],\r\n    'yas': [25, 30, 35, 28],\r\n    'maas': [5000, 6500, 7200, 5800]\r\n}\r\n\r\ndf = pd.DataFrame(veriler)\r\nprint(\"Veri seti:\")\r\nprint(df)\r\n\r\nprint(\"\\nTemel istatistikler:\")\r\nprint(df.describe())\r\n```\r\n\r\n#### 3. Otomasyon\r\n```python\r\n# Dosya organizasyonu scripti\r\nimport os\r\nimport shutil\r\n\r\ndef dosyalari_organize_et(kaynak_klasor):\r\n    \"\"\"Dosyalarƒ± uzantƒ±larƒ±na g√∂re organize eder\"\"\"\r\n    \r\n    uzanti_klasorleri = {\r\n        '.jpg': 'Resimler',\r\n        '.png': 'Resimler',\r\n        '.pdf': 'Belgeler',\r\n        '.txt': 'Belgeler',\r\n        '.mp3': 'Muzik',\r\n        '.mp4': 'Videolar'\r\n    }\r\n    \r\n    for dosya in os.listdir(kaynak_klasor):\r\n        if os.path.isfile(os.path.join(kaynak_klasor, dosya)):\r\n            uzanti = os.path.splitext(dosya)[1].lower()\r\n            \r\n            if uzanti in uzanti_klasorleri:\r\n                hedef_klasor = uzanti_klasorleri[uzanti]\r\n                hedef_yol = os.path.join(kaynak_klasor, hedef_klasor)\r\n                \r\n                # Klas√∂r yoksa olu≈ütur\r\n                os.makedirs(hedef_yol, exist_ok=True)\r\n                \r\n                # Dosyayƒ± ta≈üƒ±\r\n                kaynak = os.path.join(kaynak_klasor, dosya)\r\n                hedef = os.path.join(hedef_yol, dosya)\r\n                shutil.move(kaynak, hedef)\r\n                \r\n                print(f\"{dosya} -> {hedef_klasor}\")\r\n\r\n# Kullanƒ±m: dosyalari_organize_et(\"/path/to/folder\")\r\n```\r\n\r\n### üìö √ñƒürenmeye Devam Etmek ƒ∞√ßin Kaynaklar\r\n\r\n#### K√ºt√ºphaneler\r\n- **Web**: Django, Flask, FastAPI\r\n- **Veri**: Pandas, NumPy, Matplotlib\r\n- **AI/ML**: Scikit-learn, TensorFlow, PyTorch\r\n- **Otomasyon**: Selenium, BeautifulSoup, Requests\r\n\r\n#### Proje Fikirleri\r\n1. **Ki≈üisel Blog**: Django ile\r\n2. **Hava Durumu Uygulamasƒ±**: API kullanarak\r\n3. **Finans Takip√ßisi**: Excel verileri analizi\r\n4. **Web Scraper**: Haber sitelerinden veri √ßekme\r\n5. **Chatbot**: Basit soru-cevap sistemi\r\n\r\n### üíº Kariyer Fƒ±rsatlarƒ±\r\n\r\nPython √∂ƒürendikten sonra ≈üu pozisyonlara ba≈üvurabilirsiniz:\r\n\r\n- **Junior Python Developer**: 35,000-50,000 TL\r\n- **Data Analyst**: 40,000-65,000 TL\r\n- **Backend Developer**: 45,000-70,000 TL\r\n- **DevOps Engineer**: 50,000-80,000 TL\r\n- **Machine Learning Engineer**: 60,000-100,000 TL\r\n\r\n## üéØ √ñzet ve Son Tavsiyeler\r\n\r\n### Python √ñƒürenme Yol Haritasƒ±:\r\n1. **Temel Syntax** (1-2 hafta): Deƒüi≈ükenler, veri tipleri, kontrol yapƒ±larƒ±\r\n2. **Fonksiyonlar ve Mod√ºller** (1 hafta): Kod organizasyonu\r\n3. **OOP Temelleri** (1-2 hafta): Class ve object kavramlarƒ±\r\n4. **Projeler** (s√ºrekli): √ñƒürendiklerinizi uygulayƒ±n\r\n5. **Uzmanla≈üma** (3-6 ay): Web, veri analizi veya AI se√ßin\r\n\r\n### üî• Ba≈üarƒ± ƒ∞√ßin Altƒ±n Kurallar:\r\n- **Her g√ºn kod yazƒ±n** (en az 30 dakika)\r\n- **Projeler yapƒ±n** (tutorial'dan √∂te)\r\n- **Hata yapmaktan korkmayƒ±n**\r\n- **Toplulukla etkile≈üim kurun** (GitHub, Stack Overflow)\r\n- **S√ºrekli √∂ƒürenin** (yeni k√ºt√ºphaneler, teknolojiler)\r\n\r\n### üìä √ñnemli Resim Promptlarƒ±:\r\n\r\n1. **\"Python programming roadmap infographic from beginner to expert\"**\r\n2. **\"Python code editor setup with VS Code and extensions\"**\r\n3. **\"Python data structures visualization: lists, dictionaries, sets\"**\r\n4. **\"Python career paths diagram showing web dev, data science, AI paths\"**\r\n5. **\"Python programming concepts flowchart with variables, functions, loops\"**\r\n\r\n## üéâ Tebrikler!\r\n\r\nBu rehberi tamamladƒ±ƒüƒ±nƒ±z i√ßin tebrikler! Artƒ±k Python'un temellerini biliyorsunuz ve ilk projelerinizi geli≈ütirebilirsiniz. Unutmayƒ±n, programlama √∂ƒürenmek bir maraton, sprint deƒüil. Sabƒ±rlƒ± olun, pratik yapƒ±n ve asla vazge√ßmeyin!\r\n\r\n**Bir sonraki adƒ±mƒ±nƒ±z:** Zumenzu platformunda interaktif Python quiz'lerini √ß√∂zerek bilginizi peki≈ütirin ve badge'ler kazanƒ±n!\r\n\r\n---\r\n\r\n*Bu makale Zumenzu programlama ekibi tarafƒ±ndan Python √∂ƒürenmek isteyenler i√ßin hazƒ±rlanmƒ±≈ütƒ±r. Interaktif Python dersleri ve projeler i√ßin [Zumenzu platformunu](/) ziyaret edin.*",
    "category": "Python Basics",
    "tags": "[\"python\",\"programming introduction\",\"learn python\",\"beginner\",\"tutorial\",\"start coding\"]",
    "featured": true,
    "readTime": "28 min",
    "estimatedMinutes": 5,
    "author": "Zumenzu Programming Team",
    "seoKeywords": null,
    "metaDescription": null,
    "socialImageUrl": null,
    "isPublished": true,
    "publishedAt": "2025-08-10T22:22:53.404Z",
    "language": "tr"
  },
  {
    "title": "Python Data Analysis: From Zero to Advanced with Pandas 2025 Guide",
    "slug": "python-data-analysis-pandas-guide",
    "description": "Learn data analysis in Python with the Pandas library. Comprehensive guide supported with real projects, examples and best practices.",
    "excerpt": null,
    "content": "\r\n# Python Data Analysis: From Zero to Advanced with Pandas 2025 Guide\r\n\r\nToday, data is one of the most valuable assets of businesses. Python's **Pandas** library is one of the most powerful tools for analyzing this data and extracting meaningful insights. In this comprehensive guide, you'll learn data analysis with Pandas from scratch.\r\n\r\n## üêº What is Pandas and Why is it Important?\r\n\r\nPandas (Python Data Analysis Library) is an open-source data manipulation and analysis library developed for the Python programming language. You can think of it as the programming world's equivalent of Excel, but much more powerful!\r\n\r\n### Advantages of Pandas:\r\n- ‚úÖ **Fast and Efficient**: Can work with large datasets\r\n- ‚úÖ **Flexible Data Structures**: DataFrame and Series\r\n- ‚úÖ **Easy Data Cleaning**: Handling missing data\r\n- ‚úÖ **Powerful Import/Export**: CSV, Excel, JSON, SQL support\r\n- ‚úÖ **Statistical Analysis**: Descriptive statistics\r\n\r\n## üöÄ Pandas Installation and First Steps\r\n\r\n### Installation\r\n```bash\r\n# Installation with pip\r\npip install pandas\r\n\r\n# If using Anaconda\r\nconda install pandas\r\n\r\n# Additional libraries for visualization\r\npip install matplotlib seaborn\r\n```\r\n\r\n### First Pandas Code\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n# Check Pandas version\r\nprint(f\"Pandas version: {pd.__version__}\")\r\n\r\n# Creating a simple DataFrame\r\ndata = {\r\n    'name': ['John', 'Sarah', 'Michael', 'Emma', 'David'],\r\n    'age': [25, 30, 35, 28, 32],\r\n    'salary': [5000, 6500, 7200, 5800, 6800],\r\n    'city': ['New York', 'Boston', 'Chicago', 'New York', 'Boston']\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\nprint(df)\r\n```\r\n\r\n**Output:**\r\n```\r\n      name  age  salary      city\r\n0     John   25    5000  New York\r\n1    Sarah   30    6500    Boston\r\n2  Michael   35    7200   Chicago\r\n3     Emma   28    5800  New York\r\n4    David   32    6800    Boston\r\n```\r\n\r\n## üìä Pandas Basic Data Structures\r\n\r\n### 1. Series\r\nOne-dimensional data structure, similar to a column in Excel.\r\n\r\n```python\r\n# Creating Series\r\nages = pd.Series([25, 30, 35, 28, 32], name='ages')\r\nprint(ages)\r\n\r\n# Series with index\r\ntemperatures = pd.Series(\r\n    [22, 25, 19, 30, 27],\r\n    index=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\r\n    name='temperature'\r\n)\r\nprint(temperatures)\r\n```\r\n\r\n### 2. DataFrame\r\nƒ∞ki boyutlu veri yapƒ±sƒ±dƒ±r, Excel tablosuna benzer.\r\n\r\n```python\r\n# DataFrame olu≈üturmanƒ±n farklƒ± yollarƒ±\r\n\r\n# 1. Dictionary'den\r\nsales_data = {\r\n    'tarih': ['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04'],\r\n    'urun': ['Laptop', 'Mouse', 'Klavye', 'Monitor'],\r\n    'fiyat': [15000, 250, 800, 5200],\r\n    'adet': [2, 10, 5, 3]\r\n}\r\ndf_sales = pd.DataFrame(sales_data)\r\n\r\n# 2. Liste listelerinden\r\ndata_list = [\r\n    ['Laptop', 15000, 2],\r\n    ['Mouse', 250, 10], \r\n    ['Klavye', 800, 5],\r\n    ['Monitor', 5200, 3]\r\n]\r\ndf_list = pd.DataFrame(data_list, columns=['urun', 'fiyat', 'adet'])\r\n\r\nprint(\"Satƒ±≈ü Verileri:\")\r\nprint(df_sales)\r\n```\r\n\r\n## üìÅ Veri Okuma ve Yazma\r\n\r\n### CSV Dosyalarƒ±\r\n```python\r\n# CSV okuma\r\ndf = pd.read_csv('sales_data.csv')\r\n\r\n# Geli≈ümi≈ü CSV okuma\r\ndf = pd.read_csv(\r\n    'sales_data.csv',\r\n    sep=';',                    # Ayƒ±rƒ±cƒ±\r\n    encoding='utf-8',           # Karakter kodlamasƒ±\r\n    parse_dates=['tarih'],      # Tarih s√ºtununu datetime'a √ßevir\r\n    index_col='id',             # Index s√ºtunu\r\n    na_values=['', 'NULL', 'N/A']  # Bo≈ü deƒüer tanƒ±mlarƒ±\r\n)\r\n\r\n# CSV yazma\r\ndf.to_csv('output.csv', index=False, encoding='utf-8')\r\n```\r\n\r\n### Excel Dosyalarƒ±\r\n```python\r\n# Excel okuma\r\ndf = pd.read_excel('data.xlsx', sheet_name='Sheet1')\r\n\r\n# Birden fazla sheet okuma\r\nall_sheets = pd.read_excel('data.xlsx', sheet_name=None)\r\n\r\n# Excel yazma\r\ndf.to_excel('output.xlsx', sheet_name='Satƒ±≈ü_Verileri', index=False)\r\n\r\n# Birden fazla sheet'e yazma\r\nwith pd.ExcelWriter('multi_sheet.xlsx') as writer:\r\n    df1.to_excel(writer, sheet_name='Sheet1')\r\n    df2.to_excel(writer, sheet_name='Sheet2')\r\n```\r\n\r\n## üîç Veri Ke≈üfi ve ƒ∞nceleme\r\n\r\n### Temel Bilgi Alma\r\n```python\r\n# DataFrame hakkƒ±nda genel bilgi\r\nprint(\"DataFrame ≈üekli:\", df.shape)  # (satƒ±r, s√ºtun)\r\nprint(\"S√ºtun isimleri:\", df.columns.tolist())\r\nprint(\"Veri tipleri:\")\r\nprint(df.dtypes)\r\n\r\n# ƒ∞lk ve son satƒ±rlar\r\nprint(\"ƒ∞lk 5 satƒ±r:\")\r\nprint(df.head())\r\nprint(\"Son 3 satƒ±r:\")\r\nprint(df.tail(3))\r\n\r\n# Detaylƒ± bilgi\r\nprint(df.info())\r\n\r\n# Tanƒ±mlayƒ±cƒ± istatistikler\r\nprint(df.describe())\r\n\r\n# Bo≈ü deƒüer kontrol√º\r\nprint(\"Bo≈ü deƒüerler:\")\r\nprint(df.isnull().sum())\r\n```\r\n\r\n### Ger√ßek D√ºnya √ñrneƒüi: E-ticaret Veri Analizi\r\n```python\r\n# √ñrnek e-ticaret verisi olu≈üturalƒ±m\r\nimport random\r\nfrom datetime import datetime, timedelta\r\n\r\n# Rastgele veri olu≈üturma\r\nnp.random.seed(42)\r\nproducts = ['Laptop', 'Mouse', 'Klavye', 'Monitor', 'Kulaklƒ±k', 'Webcam']\r\ncities = ['ƒ∞stanbul', 'Ankara', 'ƒ∞zmir', 'Bursa', 'Antalya']\r\n\r\ndata = []\r\nfor i in range(1000):\r\n    date = datetime(2023, 1, 1) + timedelta(days=random.randint(0, 364))\r\n    product = random.choice(products)\r\n    price = random.randint(100, 5000)\r\n    quantity = random.randint(1, 5)\r\n    city = random.choice(cities)\r\n    \r\n    data.append({\r\n        'tarih': date,\r\n        'urun': product,\r\n        'fiyat': price,\r\n        'adet': quantity,\r\n        'sehir': city,\r\n        'toplam': price * quantity\r\n    })\r\n\r\necommerce_df = pd.DataFrame(data)\r\nprint(\"E-ticaret veri seti olu≈üturuldu:\")\r\nprint(ecommerce_df.head())\r\n```\r\n\r\n## üéØ Veri Se√ßme ve Filtreleme\r\n\r\n### S√ºtun Se√ßimi\r\n```python\r\n# Tek s√ºtun se√ßme\r\nproducts = df['urun']  # Series d√∂ner\r\nproducts = df[['urun']]  # DataFrame d√∂ner\r\n\r\n# Birden fazla s√ºtun\r\nselected_cols = df[['urun', 'fiyat', 'toplam']]\r\n\r\n# S√ºtun isimlerini kullanarak\r\nnumeric_cols = df.select_dtypes(include=[np.number])\r\ntext_cols = df.select_dtypes(include=['object'])\r\n```\r\n\r\n### Satƒ±r Se√ßimi\r\n```python\r\n# Index ile se√ßim\r\nfirst_row = df.iloc[0]  # ƒ∞lk satƒ±r\r\nfirst_five = df.iloc[:5]  # ƒ∞lk 5 satƒ±r\r\nlast_three = df.iloc[-3:]  # Son 3 satƒ±r\r\n\r\n# Ko≈üullu se√ßim\r\nexpensive_products = df[df['fiyat'] > 1000]\r\nistanbul_sales = df[df['sehir'] == 'ƒ∞stanbul']\r\n\r\n# Birden fazla ko≈üul\r\nhigh_value_istanbul = df[\r\n    (df['fiyat'] > 1000) & \r\n    (df['sehir'] == 'ƒ∞stanbul')\r\n]\r\n\r\n# isin() metodu\r\nbig_cities = df[df['sehir'].isin(['ƒ∞stanbul', 'Ankara', 'ƒ∞zmir'])]\r\n```\r\n\r\n## üßπ Veri Temizleme\r\n\r\n### Eksik Verilerle Ba≈üa √áƒ±kma\r\n```python\r\n# Eksik veri kontrol\r\nprint(df.isnull().sum())\r\n\r\n# Eksik verileri doldurma\r\ndf['fiyat'].fillna(df['fiyat'].mean(), inplace=True)  # Ortalama ile\r\ndf['sehir'].fillna('Bilinmiyor', inplace=True)        # Sabit deƒüer ile\r\n\r\n# Eksik satƒ±rlarƒ± silme\r\ndf_clean = df.dropna()  # T√ºm eksik satƒ±rlarƒ± sil\r\ndf_clean = df.dropna(subset=['fiyat', 'adet'])  # Belirli s√ºtunlardaki eksikler\r\n```\r\n\r\n### Duplikasyon Kontrol√º\r\n```python\r\n# Duplikat kontrol\r\nprint(f\"Duplikat satƒ±r sayƒ±sƒ±: {df.duplicated().sum()}\")\r\n\r\n# Duplikatlarƒ± silme\r\ndf_unique = df.drop_duplicates()\r\ndf_unique = df.drop_duplicates(subset=['urun'], keep='first')\r\n```\r\n\r\n## üìà Veri Manip√ºlasyonu\r\n\r\n### Yeni S√ºtunlar Olu≈üturma\r\n```python\r\n# Basit hesaplamalar\r\ndf['kar_marji'] = df['fiyat'] * 0.2\r\ndf['toplam_kar'] = df['kar_marji'] * df['adet']\r\n\r\n# Ko≈üullu s√ºtun olu≈üturma\r\ndf['fiyat_kategorisi'] = df['fiyat'].apply(\r\n    lambda x: 'Ucuz' if x < 500 else 'Orta' if x < 2000 else 'Pahalƒ±'\r\n)\r\n\r\n# Tarih bilgilerini √ßƒ±karma\r\ndf['tarih'] = pd.to_datetime(df['tarih'])\r\ndf['yil'] = df['tarih'].dt.year\r\ndf['ay'] = df['tarih'].dt.month\r\ndf['haftanin_gunu'] = df['tarih'].dt.day_name()\r\n```\r\n\r\n## üìä Gruplama ve Agregasyon\r\n\r\n### Temel Gruplama\r\n```python\r\n# Tek s√ºtuna g√∂re gruplama\r\ncity_sales = df.groupby('sehir')['toplam'].sum()\r\nprint(\"≈ûehirlere g√∂re toplam satƒ±≈ü:\")\r\nprint(city_sales.sort_values(ascending=False))\r\n\r\n# Birden fazla s√ºtuna g√∂re gruplama\r\nmonthly_category_sales = df.groupby(['ay', 'urun'])['toplam'].sum()\r\n\r\n# Farklƒ± agregasyon fonksiyonlarƒ±\r\ncity_stats = df.groupby('sehir').agg({\r\n    'toplam': ['sum', 'mean', 'count'],\r\n    'fiyat': ['min', 'max'],\r\n    'adet': 'sum'\r\n})\r\nprint(city_stats)\r\n```\r\n\r\n### Pivot Tablolar\r\n```python\r\n# Basit pivot tablo\r\nmonthly_sales = df.pivot_table(\r\n    index='ay',\r\n    columns='urun',\r\n    values='toplam',\r\n    aggfunc='sum',\r\n    fill_value=0\r\n)\r\nprint(monthly_sales)\r\n\r\n# √áoklu agregasyon\r\ndetailed_pivot = df.pivot_table(\r\n    index='sehir',\r\n    columns='urun',\r\n    values=['toplam', 'adet'],\r\n    aggfunc={'toplam': 'sum', 'adet': 'mean'},\r\n    fill_value=0\r\n)\r\n```\r\n\r\n## üìä Veri G√∂rselle≈ütirme\r\n\r\n### Matplotlib ile Temel Grafikler\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\n# Aylƒ±k satƒ±≈ü trendi\r\nmonthly_sales = df.groupby('ay')['toplam'].sum()\r\n\r\nfig, axes = plt.subplots(2, 2, figsize=(15, 12))\r\n\r\n# Line plot - Aylƒ±k satƒ±≈ü trendi\r\naxes[0,0].plot(monthly_sales.index, monthly_sales.values, marker='o')\r\naxes[0,0].set_title('Aylƒ±k Satƒ±≈ü Trendi')\r\naxes[0,0].set_xlabel('Ay')\r\naxes[0,0].set_ylabel('Toplam Satƒ±≈ü (TL)')\r\n\r\n# Bar plot - ≈ûehirlere g√∂re satƒ±≈ü\r\ncity_sales = df.groupby('sehir')['toplam'].sum().sort_values(ascending=False)\r\naxes[0,1].bar(city_sales.index, city_sales.values)\r\naxes[0,1].set_title('≈ûehirlere G√∂re Toplam Satƒ±≈ü')\r\naxes[0,1].tick_params(axis='x', rotation=45)\r\n\r\n# Histogram - Fiyat daƒüƒ±lƒ±mƒ±\r\naxes[1,0].hist(df['fiyat'], bins=30, alpha=0.7)\r\naxes[1,0].set_title('Fiyat Daƒüƒ±lƒ±mƒ±')\r\naxes[1,0].set_xlabel('Fiyat (TL)')\r\n\r\n# Pie chart - √úr√ºn paylarƒ±\r\nproduct_sales = df.groupby('urun')['toplam'].sum()\r\naxes[1,1].pie(product_sales.values, labels=product_sales.index, autopct='%1.1f%%')\r\naxes[1,1].set_title('√úr√ºnlere G√∂re Satƒ±≈ü Payƒ±')\r\n\r\nplt.tight_layout()\r\nplt.show()\r\n```\r\n\r\n## üîÑ ƒ∞leri Seviye Teknikleri\r\n\r\n### Apply ve Transform\r\n```python\r\n# Apply ile satƒ±r bazlƒ± i≈ülemler\r\ndef calculate_profit_margin(row):\r\n    if row['urun'] == 'Laptop':\r\n        return row['fiyat'] * 0.15\r\n    else:\r\n        return row['fiyat'] * 0.25\r\n\r\ndf['kar_marji'] = df.apply(calculate_profit_margin, axis=1)\r\n\r\n# Transform ile grup bazlƒ± i≈ülemler\r\ndf['sehir_ortalama'] = df.groupby('sehir')['fiyat'].transform('mean')\r\ndf['sehir_siralamasƒ±'] = df.groupby('sehir')['toplam'].transform(\r\n    lambda x: x.rank(ascending=False)\r\n)\r\n```\r\n\r\n### Window Functions\r\n```python\r\n# Rolling window hesaplamalarƒ±\r\ndf_sorted = df.sort_values('tarih')\r\ndf_sorted['7gun_ortalama'] = df_sorted['toplam'].rolling(window=7).mean()\r\ndf_sorted['30gun_toplam'] = df_sorted['toplam'].rolling(window=30).sum()\r\n\r\n# Shift i≈ülemleri\r\ndf_sorted['onceki_gun'] = df_sorted['toplam'].shift(1)\r\ndf_sorted['degisim'] = df_sorted['toplam'] - df_sorted['onceki_gun']\r\n```\r\n\r\n## üíº Ger√ßek Proje √ñrneƒüi\r\n\r\n### E-ticaret Satƒ±≈ü Analizi\r\n```python\r\nclass ECommerceAnalyzer:\r\n    def __init__(self, data_path):\r\n        self.df = pd.read_csv(data_path)\r\n        self.prepare_data()\r\n    \r\n    def prepare_data(self):\r\n        \"\"\"Veriyi analiz i√ßin hazƒ±rla\"\"\"\r\n        self.df['tarih'] = pd.to_datetime(self.df['tarih'])\r\n        self.df['yil'] = self.df['tarih'].dt.year\r\n        self.df['ay'] = self.df['tarih'].dt.month\r\n        self.df['sehir'] = self.df['sehir'].astype('category')\r\n    \r\n    def sales_summary(self):\r\n        \"\"\"Satƒ±≈ü √∂zeti\"\"\"\r\n        return {\r\n            'toplam_satis': self.df['toplam'].sum(),\r\n            'ortalama_satis': self.df['toplam'].mean(),\r\n            'satis_adedi': len(self.df),\r\n            'benzersiz_urun': self.df['urun'].nunique()\r\n        }\r\n    \r\n    def top_products(self, n=10):\r\n        \"\"\"En √ßok satan √ºr√ºnler\"\"\"\r\n        return self.df.groupby('urun').agg({\r\n            'toplam': 'sum',\r\n            'adet': 'sum'\r\n        }).sort_values('toplam', ascending=False).head(n)\r\n    \r\n    def city_analysis(self):\r\n        \"\"\"≈ûehir bazlƒ± analiz\"\"\"\r\n        return self.df.groupby('sehir').agg({\r\n            'toplam': ['sum', 'mean', 'count'],\r\n            'fiyat': ['min', 'max']\r\n        })\r\n    \r\n    def generate_report(self):\r\n        \"\"\"Kapsamlƒ± rapor olu≈ütur\"\"\"\r\n        print(\"=== E-Tƒ∞CARET SATI≈û ANALƒ∞Zƒ∞ ===\\n\")\r\n        \r\n        summary = self.sales_summary()\r\n        print(\"GENEL √ñZET:\")\r\n        for key, value in summary.items():\r\n            if isinstance(value, float):\r\n                print(f\"  {key}: {value:,.2f}\")\r\n            else:\r\n                print(f\"  {key}: {value:,}\")\r\n        \r\n        print(\"\\nEN √áOK SATAN √úR√úNLER:\")\r\n        top_products = self.top_products(5)\r\n        for product, data in top_products.iterrows():\r\n            print(f\"  {product}: {data['toplam']:,.0f} TL\")\r\n\r\n# Kullanƒ±m\r\n# analyzer = ECommerceAnalyzer('data.csv')\r\n# analyzer.generate_report()\r\n```\r\n\r\n## üéØ Performans ƒ∞pu√ßlarƒ±\r\n\r\n### Hƒ±zlƒ± Pandas Kullanƒ±mƒ±\r\n```python\r\n# Vectorized i≈ülemler kullanƒ±n\r\n# Yava≈ü:\r\n# df['expensive'] = df['fiyat'].apply(lambda x: x > 1000)\r\n\r\n# Hƒ±zlƒ±:\r\ndf['expensive'] = df['fiyat'] > 1000\r\n\r\n# Categorical veri kullanƒ±n\r\ndf['sehir'] = df['sehir'].astype('category')\r\n\r\n# Memory usage kontrol edin\r\nprint(df.memory_usage(deep=True))\r\n\r\n# B√ºy√ºk dosyalar i√ßin chunk okuma\r\nfor chunk in pd.read_csv('big_file.csv', chunksize=10000):\r\n    # Her chunk'ƒ± i≈üle\r\n    processed = chunk[chunk['toplam'] > 1000]\r\n```\r\n\r\n## üìà Sonu√ß ve Kariyer Fƒ±rsatlarƒ±\r\n\r\nPandas ile veri analizi √∂ƒürenmek size ≈üu fƒ±rsatlarƒ± a√ßar:\r\n\r\n### üí∞ **Kariyer Yollarƒ±:**\r\n- **Veri Analisti**: 40,000-70,000 TL\r\n- **Veri Bilimci**: 60,000-120,000 TL  \r\n- **Business Intelligence**: 45,000-85,000 TL\r\n- **Finans Analisti**: 50,000-90,000 TL\r\n\r\n### üöÄ **Sonraki Adƒ±mlar:**\r\n1. **ƒ∞statistik**: Scipy, Statsmodels\r\n2. **G√∂rselle≈ütirme**: Seaborn, Plotly\r\n3. **Makine √ñƒürenmesi**: Scikit-learn\r\n4. **Big Data**: Dask, PySpark\r\n\r\n### üìä **√ñnemli Resim Promptlarƒ±:**\r\n\r\n1. **\"Pandas DataFrame structure visualization with rows, columns and data types\"**\r\n2. **\"Data analysis workflow diagram from raw data to insights\"**\r\n3. **\"Python data science ecosystem infographic with pandas, numpy, matplotlib\"**\r\n4. **\"Data cleaning process flowchart showing missing values handling\"**\r\n5. **\"Business intelligence dashboard showing sales analytics charts\"**\r\n\r\n## üí° Practical Tips\r\n\r\n### Daily Data Analysis Routine:\r\n1. **Data Exploration** (15 min): `.head()`, `.info()`, `.describe()`\r\n2. **Data Cleaning** (30 min): Missing values, duplicates\r\n3. **Analysis** (45 min): Grouping, aggregation, pivot\r\n4. **Visualization** (30 min): Charts and tables\r\n5. **Reporting** (30 min): Summarizing findings\r\n\r\nWith this guide, you've discovered the power of Pandas. Now you can work with real datasets and perform professional analyses!\r\n\r\n---\r\n\r\n*This article was prepared by the Zumenzu data science team. Visit the [Zumenzu platform](/) for interactive Pandas lessons.*",
    "category": "Data Analysis",
    "tags": "[\"python\",\"pandas\",\"data analysis\",\"data science\",\"csv\",\"excel\",\"matplotlib\",\"numpy\"]",
    "featured": true,
    "readTime": "10 min",
    "estimatedMinutes": 5,
    "author": "Zumenzu Data Science Team",
    "seoKeywords": null,
    "metaDescription": null,
    "socialImageUrl": null,
    "isPublished": true,
    "publishedAt": "2025-08-10T22:22:53.265Z",
    "language": "tr"
  },
  {
    "title": "Python for AI and Machine Learning in 2025: Complete Beginner's Guide",
    "slug": "python-ai-machine-learning-2025-guide",
    "description": "Learn how to use Python for AI and Machine Learning in 2025. From ChatGPT APIs to computer vision, discover the latest tools and frameworks with practical examples.",
    "excerpt": null,
    "content": "\r\n# Python for AI and Machine Learning in 2025: Complete Beginner's Guide\r\n\r\nArtificial Intelligence is reshaping the world, and Python is at the heart of this revolution! In 2025, AI has become more accessible than ever before. Whether you want to build chatbots, analyze data with AI, or create computer vision applications, Python provides the perfect toolkit.\r\n\r\n## ü§ñ Why Python Dominates AI in 2025?\r\n\r\n### The AI Ecosystem Advantage:\r\n\r\n- ‚úÖ **LLM Integration**: Easy integration with ChatGPT, Claude, Gemini APIs\r\n- ‚úÖ **Rich Libraries**: TensorFlow, PyTorch, Scikit-learn, OpenAI\r\n- ‚úÖ **Simple Syntax**: Perfect for rapid AI prototyping\r\n- ‚úÖ **Community Support**: Millions of AI developers worldwide\r\n- ‚úÖ **Industry Standard**: Used by Google, Microsoft, OpenAI, Meta\r\n\r\n### What's New in 2025:\r\n\r\n- üî• **AI Agents**: Building autonomous AI systems\r\n- üî• **Multi-modal AI**: Text + Image + Voice processing\r\n- üî• **Edge AI**: Running AI on mobile and IoT devices\r\n- üî• **AI-Assisted Coding**: GitHub Copilot, ChatGPT integration\r\n- üî• **Retrieval Augmented Generation (RAG)**: Smarter chatbots\r\n\r\n## üöÄ Setting Up Your AI Development Environment\r\n\r\n### Essential Libraries for 2025\r\n\r\n```bash\r\n# Core AI libraries\r\npip install openai anthropic google-generativeai\r\npip install tensorflow pytorch torchvision\r\npip install scikit-learn pandas numpy matplotlib\r\n\r\n# Advanced AI tools\r\npip install langchain chromadb faiss-cpu\r\npip install streamlit gradio # For building AI UIs\r\npip install opencv-python pillow # Computer vision\r\n\r\n# Data processing\r\npip install requests beautifulsoup4 selenium\r\n```\r\n\r\n### Quick Environment Setup\r\n\r\n```python\r\n# Create a virtual environment\r\npython -m venv ai_env\r\n# Activate it\r\n# Windows: ai_env\\Scripts\\activate\r\n# Mac/Linux: source ai_env/bin/activate\r\n\r\n# Install requirements\r\npip install -r requirements.txt\r\n```\r\n\r\n## üéØ Project 1: Building Your First ChatGPT Application\r\n\r\n### Simple ChatGPT Integration\r\n\r\n````python\r\nimport openai\r\nimport os\r\nfrom datetime import datetime\r\n\r\nclass PythonAIAssistant:\r\n    def __init__(self, api_key):\r\n        openai.api_key = api_key\r\n        self.conversation = []\r\n\r\n    def ask_ai(self, question, context=\"You are a helpful Python programming assistant.\"):\r\n        \"\"\"Ask AI a question and get response\"\"\"\r\n        try:\r\n            response = openai.ChatCompletion.create(\r\n                model=\"gpt-4\",\r\n                messages=[\r\n                    {\"role\": \"system\", \"content\": context},\r\n                    {\"role\": \"user\", \"content\": question}\r\n                ],\r\n                max_tokens=500,\r\n                temperature=0.7\r\n            )\r\n\r\n            answer = response.choices[0].message.content\r\n\r\n            # Save conversation\r\n            self.conversation.append({\r\n                \"time\": datetime.now().strftime(\"%Y-%m-%d %H:%M\"),\r\n                \"question\": question,\r\n                \"answer\": answer\r\n            })\r\n\r\n            return answer\r\n\r\n        except Exception as e:\r\n            return f\"Error: {str(e)}\"\r\n\r\n    def code_review(self, code):\r\n        \"\"\"Get AI code review\"\"\"\r\n        prompt = f\"\"\"\r\n        Please review this Python code and provide suggestions for improvement:\r\n\r\n        ```python\r\n        {code}\r\n        ```\r\n\r\n        Focus on:\r\n        1. Code quality and best practices\r\n        2. Performance optimizations\r\n        3. Security considerations\r\n        4. Readability improvements\r\n        \"\"\"\r\n\r\n        return self.ask_ai(prompt, \"You are an expert Python code reviewer.\")\r\n\r\n    def explain_concept(self, concept):\r\n        \"\"\"Explain programming concepts\"\"\"\r\n        prompt = f\"\"\"\r\n        Explain the Python concept '{concept}' in simple terms with:\r\n        1. Clear definition\r\n        2. Practical example\r\n        3. When to use it\r\n        4. Common mistakes to avoid\r\n        \"\"\"\r\n\r\n        return self.ask_ai(prompt)\r\n\r\n    def save_conversation(self, filename=\"ai_conversation.txt\"):\r\n        \"\"\"Save conversation to file\"\"\"\r\n        with open(filename, 'w', encoding='utf-8') as f:\r\n            for chat in self.conversation:\r\n                f.write(f\"[{chat['time']}]\\n\")\r\n                f.write(f\"Q: {chat['question']}\\n\")\r\n                f.write(f\"A: {chat['answer']}\\n\")\r\n                f.write(\"-\" * 50 + \"\\n\")\r\n\r\n# Usage Example\r\ndef demo_ai_assistant():\r\n    # Replace with your OpenAI API key\r\n    API_KEY = \"your-openai-api-key-here\"\r\n\r\n    assistant = PythonAIAssistant(API_KEY)\r\n\r\n    print(\"ü§ñ Python AI Assistant Started!\")\r\n    print(\"Type 'quit' to exit, 'review' for code review, 'explain' for concept explanation\")\r\n\r\n    while True:\r\n        user_input = input(\"\\nüí¨ You: \")\r\n\r\n        if user_input.lower() == 'quit':\r\n            assistant.save_conversation()\r\n            print(\"üëã Conversation saved! Goodbye!\")\r\n            break\r\n\r\n        elif user_input.lower() == 'review':\r\n            print(\"üìù Paste your code (type 'END' on a new line when done):\")\r\n            code_lines = []\r\n            while True:\r\n                line = input()\r\n                if line == 'END':\r\n                    break\r\n                code_lines.append(line)\r\n\r\n            code = '\\n'.join(code_lines)\r\n            response = assistant.code_review(code)\r\n            print(f\"\\nüîç AI Review:\\n{response}\")\r\n\r\n        elif user_input.lower() == 'explain':\r\n            concept = input(\"üéì Which Python concept would you like explained? \")\r\n            response = assistant.explain_concept(concept)\r\n            print(f\"\\nüìö Explanation:\\n{response}\")\r\n\r\n        else:\r\n            response = assistant.ask_ai(user_input)\r\n            print(f\"\\nü§ñ AI: {response}\")\r\n\r\n# Run the demo\r\n# demo_ai_assistant()\r\n````\r\n\r\n## üß† Project 2: Intelligent Data Analyzer with AI\r\n\r\n### AI-Powered Data Analysis\r\n\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import accuracy_score, mean_squared_error\r\nimport openai\r\n\r\nclass SmartDataAnalyzer:\r\n    def __init__(self, openai_key=None):\r\n        self.data = None\r\n        self.openai_key = openai_key\r\n        if openai_key:\r\n            openai.api_key = openai_key\r\n\r\n    def load_data(self, file_path_or_url):\r\n        \"\"\"Load data from CSV file or URL\"\"\"\r\n        try:\r\n            if file_path_or_url.startswith('http'):\r\n                self.data = pd.read_csv(file_path_or_url)\r\n            else:\r\n                self.data = pd.read_csv(file_path_or_url)\r\n\r\n            print(f\"‚úÖ Data loaded successfully!\")\r\n            print(f\"üìä Shape: {self.data.shape}\")\r\n            print(f\"üè∑Ô∏è Columns: {list(self.data.columns)}\")\r\n            return True\r\n\r\n        except Exception as e:\r\n            print(f\"‚ùå Error loading data: {e}\")\r\n            return False\r\n\r\n    def analyze_with_ai(self):\r\n        \"\"\"Get AI insights about the dataset\"\"\"\r\n        if self.data is None or not self.openai_key:\r\n            return \"No data loaded or OpenAI key not provided\"\r\n\r\n        # Prepare dataset summary\r\n        summary = {\r\n            \"shape\": self.data.shape,\r\n            \"columns\": list(self.data.columns),\r\n            \"dtypes\": self.data.dtypes.to_dict(),\r\n            \"missing_values\": self.data.isnull().sum().to_dict(),\r\n            \"sample_data\": self.data.head(3).to_dict()\r\n        }\r\n\r\n        prompt = f\"\"\"\r\n        Analyze this dataset and provide insights:\r\n\r\n        Dataset Summary:\r\n        - Shape: {summary['shape']}\r\n        - Columns: {summary['columns']}\r\n        - Data Types: {summary['dtypes']}\r\n        - Missing Values: {summary['missing_values']}\r\n\r\n        Sample Data:\r\n        {summary['sample_data']}\r\n\r\n        Please provide:\r\n        1. Dataset overview and potential use cases\r\n        2. Data quality assessment\r\n        3. Interesting patterns or relationships to explore\r\n        4. Suggested analysis steps\r\n        5. Potential machine learning applications\r\n        \"\"\"\r\n\r\n        try:\r\n            response = openai.ChatCompletion.create(\r\n                model=\"gpt-4\",\r\n                messages=[{\"role\": \"user\", \"content\": prompt}],\r\n                max_tokens=800\r\n            )\r\n            return response.choices[0].message.content\r\n        except Exception as e:\r\n            return f\"AI analysis error: {e}\"\r\n\r\n    def smart_visualization(self, column=None):\r\n        \"\"\"Create intelligent visualizations\"\"\"\r\n        if self.data is None:\r\n            print(\"‚ùå No data loaded!\")\r\n            return\r\n\r\n        plt.figure(figsize=(15, 10))\r\n\r\n        # If no specific column, create overview dashboard\r\n        if column is None:\r\n            # Subplot 1: Missing values heatmap\r\n            plt.subplot(2, 3, 1)\r\n            sns.heatmap(self.data.isnull(), cbar=True, cmap='viridis')\r\n            plt.title('Missing Values Heatmap')\r\n\r\n            # Subplot 2: Correlation matrix for numeric columns\r\n            plt.subplot(2, 3, 2)\r\n            numeric_cols = self.data.select_dtypes(include=[np.number]).columns\r\n            if len(numeric_cols) > 1:\r\n                corr_matrix = self.data[numeric_cols].corr()\r\n                sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0)\r\n                plt.title('Correlation Matrix')\r\n\r\n            # Subplot 3: Data types distribution\r\n            plt.subplot(2, 3, 3)\r\n            dtype_counts = self.data.dtypes.value_counts()\r\n            plt.pie(dtype_counts.values, labels=dtype_counts.index, autopct='%1.1f%%')\r\n            plt.title('Data Types Distribution')\r\n\r\n            # Subplot 4: First numeric column distribution\r\n            plt.subplot(2, 3, 4)\r\n            if len(numeric_cols) > 0:\r\n                self.data[numeric_cols[0]].hist(bins=30, alpha=0.7)\r\n                plt.title(f'{numeric_cols[0]} Distribution')\r\n                plt.xlabel(numeric_cols[0])\r\n                plt.ylabel('Frequency')\r\n\r\n            # Subplot 5: Dataset info\r\n            plt.subplot(2, 3, 5)\r\n            plt.text(0.1, 0.8, f\"Dataset Shape: {self.data.shape}\", fontsize=12)\r\n            plt.text(0.1, 0.6, f\"Memory Usage: {self.data.memory_usage().sum() / 1024:.1f} KB\", fontsize=12)\r\n            plt.text(0.1, 0.4, f\"Numeric Columns: {len(numeric_cols)}\", fontsize=12)\r\n            plt.text(0.1, 0.2, f\"Missing Values: {self.data.isnull().sum().sum()}\", fontsize=12)\r\n            plt.title('Dataset Summary')\r\n            plt.axis('off')\r\n\r\n        else:\r\n            # Specific column analysis\r\n            if column in self.data.columns:\r\n                if self.data[column].dtype in ['int64', 'float64']:\r\n                    plt.subplot(1, 2, 1)\r\n                    self.data[column].hist(bins=30)\r\n                    plt.title(f'{column} Distribution')\r\n\r\n                    plt.subplot(1, 2, 2)\r\n                    plt.boxplot(self.data[column].dropna())\r\n                    plt.title(f'{column} Box Plot')\r\n                else:\r\n                    value_counts = self.data[column].value_counts().head(10)\r\n                    plt.bar(range(len(value_counts)), value_counts.values)\r\n                    plt.xticks(range(len(value_counts)), value_counts.index, rotation=45)\r\n                    plt.title(f'{column} Top 10 Values')\r\n\r\n        plt.tight_layout()\r\n        plt.show()\r\n\r\n    def predict_with_ai(self, target_column, feature_columns=None):\r\n        \"\"\"Create AI-powered predictions\"\"\"\r\n        if self.data is None:\r\n            print(\"‚ùå No data loaded!\")\r\n            return\r\n\r\n        if target_column not in self.data.columns:\r\n            print(f\"‚ùå Column '{target_column}' not found!\")\r\n            return\r\n\r\n        # Prepare features\r\n        if feature_columns is None:\r\n            numeric_cols = self.data.select_dtypes(include=[np.number]).columns.tolist()\r\n            feature_columns = [col for col in numeric_cols if col != target_column]\r\n\r\n        if not feature_columns:\r\n            print(\"‚ùå No suitable feature columns found!\")\r\n            return\r\n\r\n        # Clean data\r\n        clean_data = self.data[feature_columns + [target_column]].dropna()\r\n\r\n        if clean_data.empty:\r\n            print(\"‚ùå No clean data available after removing missing values!\")\r\n            return\r\n\r\n        X = clean_data[feature_columns]\r\n        y = clean_data[target_column]\r\n\r\n        # Split data\r\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\r\n\r\n        # Determine if classification or regression\r\n        if y.dtype == 'object' or len(y.unique()) < 10:\r\n            # Classification\r\n            model = RandomForestClassifier(n_estimators=100, random_state=42)\r\n            model.fit(X_train, y_train)\r\n            predictions = model.predict(X_test)\r\n            accuracy = accuracy_score(y_test, predictions)\r\n\r\n            print(f\"üéØ Classification Accuracy: {accuracy:.3f}\")\r\n\r\n            # Feature importance\r\n            importance = pd.DataFrame({\r\n                'feature': feature_columns,\r\n                'importance': model.feature_importances_\r\n            }).sort_values('importance', ascending=False)\r\n\r\n            print(\"\\nüìä Feature Importance:\")\r\n            print(importance)\r\n\r\n        else:\r\n            # Regression\r\n            model = LinearRegression()\r\n            model.fit(X_train, y_train)\r\n            predictions = model.predict(X_test)\r\n            mse = mean_squared_error(y_test, predictions)\r\n\r\n            print(f\"üìà Regression MSE: {mse:.3f}\")\r\n            print(f\"üìà RMSE: {np.sqrt(mse):.3f}\")\r\n\r\n            # Show predictions vs actual\r\n            plt.figure(figsize=(10, 6))\r\n            plt.scatter(y_test, predictions, alpha=0.7)\r\n            plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)\r\n            plt.xlabel('Actual Values')\r\n            plt.ylabel('Predicted Values')\r\n            plt.title('Predictions vs Actual Values')\r\n            plt.show()\r\n\r\n        return model\r\n\r\n# Usage Example\r\ndef demo_smart_analyzer():\r\n    # Initialize analyzer\r\n    analyzer = SmartDataAnalyzer(openai_key=\"your-openai-key-here\")\r\n\r\n    # Load sample data (you can use any CSV file)\r\n    # For demo, let's create sample data\r\n    sample_data = pd.DataFrame({\r\n        'age': np.random.randint(18, 80, 1000),\r\n        'income': np.random.normal(50000, 15000, 1000),\r\n        'education_years': np.random.randint(12, 20, 1000),\r\n        'satisfaction': np.random.choice(['Low', 'Medium', 'High'], 1000)\r\n    })\r\n\r\n    # Save and load sample data\r\n    sample_data.to_csv('sample_data.csv', index=False)\r\n    analyzer.load_data('sample_data.csv')\r\n\r\n    # Get AI insights\r\n    print(\"ü§ñ AI Analysis:\")\r\n    insights = analyzer.analyze_with_ai()\r\n    print(insights)\r\n\r\n    # Create visualizations\r\n    print(\"\\nüìä Creating smart visualizations...\")\r\n    analyzer.smart_visualization()\r\n\r\n    # Make predictions\r\n    print(\"\\nüéØ Making AI predictions...\")\r\n    model = analyzer.predict_with_ai('satisfaction', ['age', 'income', 'education_years'])\r\n\r\n# Run demo\r\n# demo_smart_analyzer()\r\n```\r\n\r\n## üé® Project 3: Computer Vision with AI\r\n\r\n### Image Analysis and Processing\r\n\r\n```python\r\nimport cv2\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom PIL import Image, ImageDraw, ImageFont\r\nimport requests\r\nimport base64\r\nimport openai\r\n\r\nclass AIVisionAnalyzer:\r\n    def __init__(self, openai_key=None):\r\n        self.openai_key = openai_key\r\n        if openai_key:\r\n            openai.api_key = openai_key\r\n\r\n    def analyze_image_with_ai(self, image_path):\r\n        \"\"\"Analyze image using GPT-4 Vision\"\"\"\r\n        if not self.openai_key:\r\n            return \"OpenAI key not provided\"\r\n\r\n        # Encode image to base64\r\n        with open(image_path, \"rb\") as image_file:\r\n            base64_image = base64.b64encode(image_file.read()).decode('utf-8')\r\n\r\n        try:\r\n            response = openai.ChatCompletion.create(\r\n                model=\"gpt-4-vision-preview\",\r\n                messages=[\r\n                    {\r\n                        \"role\": \"user\",\r\n                        \"content\": [\r\n                            {\r\n                                \"type\": \"text\",\r\n                                \"text\": \"Analyze this image in detail. Describe what you see, identify objects, colors, composition, and any interesting features.\"\r\n                            },\r\n                            {\r\n                                \"type\": \"image_url\",\r\n                                \"image_url\": {\r\n                                    \"url\": f\"data:image/jpeg;base64,{base64_image}\"\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                max_tokens=500\r\n            )\r\n\r\n            return response.choices[0].message.content\r\n\r\n        except Exception as e:\r\n            return f\"Error analyzing image: {e}\"\r\n\r\n    def detect_faces(self, image_path):\r\n        \"\"\"Detect faces in image using OpenCV\"\"\"\r\n        # Load the image\r\n        img = cv2.imread(image_path)\r\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\r\n\r\n        # Load face cascade\r\n        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\r\n\r\n        # Detect faces\r\n        faces = face_cascade.detectMultiScale(gray, 1.1, 4)\r\n\r\n        # Draw rectangles around faces\r\n        for (x, y, w, h) in faces:\r\n            cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)\r\n\r\n        print(f\"üîç Found {len(faces)} face(s)\")\r\n\r\n        # Display result\r\n        plt.figure(figsize=(12, 8))\r\n        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\r\n        plt.title(f'Face Detection - {len(faces)} faces found')\r\n        plt.axis('off')\r\n        plt.show()\r\n\r\n        return faces\r\n\r\n    def extract_text_from_image(self, image_path):\r\n        \"\"\"Extract text from image using OCR\"\"\"\r\n        try:\r\n            import pytesseract\r\n\r\n            # Read image\r\n            img = cv2.imread(image_path)\r\n\r\n            # Convert to RGB\r\n            rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\r\n\r\n            # Extract text\r\n            text = pytesseract.image_to_string(rgb_img)\r\n\r\n            print(\"üìù Extracted Text:\")\r\n            print(\"-\" * 50)\r\n            print(text)\r\n            print(\"-\" * 50)\r\n\r\n            return text\r\n\r\n        except ImportError:\r\n            return \"‚ùå pytesseract not installed. Run: pip install pytesseract\"\r\n        except Exception as e:\r\n            return f\"‚ùå Error extracting text: {e}\"\r\n\r\n    def color_analysis(self, image_path):\r\n        \"\"\"Analyze dominant colors in image\"\"\"\r\n        # Read image\r\n        img = cv2.imread(image_path)\r\n        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\r\n\r\n        # Reshape image to be a list of pixels\r\n        pixels = img_rgb.reshape(-1, 3)\r\n\r\n        # Use KMeans to find dominant colors\r\n        from sklearn.cluster import KMeans\r\n\r\n        kmeans = KMeans(n_clusters=5, random_state=42)\r\n        kmeans.fit(pixels)\r\n\r\n        # Get colors and their percentages\r\n        colors = kmeans.cluster_centers_.astype(int)\r\n        labels = kmeans.labels_\r\n\r\n        # Calculate percentages\r\n        percentages = np.bincount(labels) / len(labels) * 100\r\n\r\n        # Create color palette visualization\r\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\r\n\r\n        # Original image\r\n        ax1.imshow(img_rgb)\r\n        ax1.set_title('Original Image')\r\n        ax1.axis('off')\r\n\r\n        # Color palette\r\n        palette = np.zeros((100, 500, 3), dtype=int)\r\n        start = 0\r\n\r\n        for i, (color, percentage) in enumerate(zip(colors, percentages)):\r\n            end = start + int(percentage * 5)\r\n            palette[:, start:end] = color\r\n            start = end\r\n\r\n        ax2.imshow(palette)\r\n        ax2.set_title('Dominant Colors')\r\n        ax2.axis('off')\r\n\r\n        # Print color information\r\n        print(\"üé® Dominant Colors:\")\r\n        for i, (color, percentage) in enumerate(zip(colors, percentages)):\r\n            print(f\"Color {i+1}: RGB{tuple(color)} - {percentage:.1f}%\")\r\n\r\n        plt.tight_layout()\r\n        plt.show()\r\n\r\n        return colors, percentages\r\n\r\n    def create_artistic_filter(self, image_path, filter_type='cartoon'):\r\n        \"\"\"Apply artistic filters to image\"\"\"\r\n        img = cv2.imread(image_path)\r\n\r\n        if filter_type == 'cartoon':\r\n            # Cartoon effect\r\n            # 1. Apply bilateral filter to reduce noise\r\n            bilateral = cv2.bilateralFilter(img, 15, 50, 50)\r\n\r\n            # 2. Create edge mask\r\n            gray = cv2.cvtColor(bilateral, cv2.COLOR_BGR2GRAY)\r\n            edges = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)\r\n            edges = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)\r\n\r\n            # 3. Combine with original\r\n            cartoon = cv2.bitwise_and(bilateral, edges)\r\n\r\n        elif filter_type == 'pencil':\r\n            # Pencil sketch effect\r\n            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\r\n            gray_blur = cv2.medianBlur(gray, 5)\r\n            edges = cv2.adaptiveThreshold(gray_blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)\r\n            cartoon = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)\r\n\r\n        elif filter_type == 'oil_painting':\r\n            # Oil painting effect\r\n            cartoon = cv2.xphoto.oilPainting(img, 7, 1)\r\n\r\n        else:\r\n            cartoon = img\r\n\r\n        # Display results\r\n        plt.figure(figsize=(15, 5))\r\n\r\n        plt.subplot(1, 2, 1)\r\n        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\r\n        plt.title('Original')\r\n        plt.axis('off')\r\n\r\n        plt.subplot(1, 2, 2)\r\n        plt.imshow(cv2.cvtColor(cartoon, cv2.COLOR_BGR2RGB))\r\n        plt.title(f'{filter_type.title()} Filter')\r\n        plt.axis('off')\r\n\r\n        plt.tight_layout()\r\n        plt.show()\r\n\r\n        return cartoon\r\n\r\n# Usage Example\r\ndef demo_ai_vision():\r\n    # Initialize vision analyzer\r\n    vision = AIVisionAnalyzer(openai_key=\"your-openai-key-here\")\r\n\r\n    # For demo, you can download a sample image or use your own\r\n    image_path = \"sample_image.jpg\"\r\n\r\n    print(\"üîç AI Vision Analysis Demo\")\r\n    print(\"=\" * 50)\r\n\r\n    # AI-powered image analysis\r\n    print(\"\\nü§ñ AI Image Analysis:\")\r\n    ai_analysis = vision.analyze_image_with_ai(image_path)\r\n    print(ai_analysis)\r\n\r\n    # Face detection\r\n    print(\"\\nüë§ Face Detection:\")\r\n    faces = vision.detect_faces(image_path)\r\n\r\n    # Color analysis\r\n    print(\"\\nüé® Color Analysis:\")\r\n    colors, percentages = vision.color_analysis(image_path)\r\n\r\n    # Text extraction (if image contains text)\r\n    print(\"\\nüìù Text Extraction:\")\r\n    text = vision.extract_text_from_image(image_path)\r\n\r\n    # Apply artistic filters\r\n    print(\"\\nüé® Artistic Filters:\")\r\n    cartoon_img = vision.create_artistic_filter(image_path, 'cartoon')\r\n\r\n# Run demo\r\n# demo_ai_vision()\r\n```\r\n\r\n## üåü 2025 AI Trends to Master\r\n\r\n### 1. Retrieval Augmented Generation (RAG)\r\n\r\n```python\r\nimport chromadb\r\nfrom langchain.text_splitter import TextSplitter\r\nfrom langchain.embeddings import OpenAIEmbeddings\r\n\r\nclass SmartRAGSystem:\r\n    def __init__(self, openai_key):\r\n        self.client = chromadb.Client()\r\n        self.collection = self.client.create_collection(\"documents\")\r\n        self.embeddings = OpenAIEmbeddings(openai_api_key=openai_key)\r\n        openai.api_key = openai_key\r\n\r\n    def add_documents(self, documents):\r\n        \"\"\"Add documents to vector database\"\"\"\r\n        for i, doc in enumerate(documents):\r\n            self.collection.add(\r\n                documents=[doc],\r\n                ids=[f\"doc_{i}\"]\r\n            )\r\n\r\n    def query_with_context(self, question):\r\n        \"\"\"Query with relevant context\"\"\"\r\n        # Find relevant documents\r\n        results = self.collection.query(\r\n            query_texts=[question],\r\n            n_results=3\r\n        )\r\n\r\n        context = \"\\n\".join(results['documents'][0])\r\n\r\n        # Generate response with context\r\n        prompt = f\"\"\"\r\n        Context: {context}\r\n\r\n        Question: {question}\r\n\r\n        Answer the question based on the provided context.\r\n        \"\"\"\r\n\r\n        response = openai.ChatCompletion.create(\r\n            model=\"gpt-4\",\r\n            messages=[{\"role\": \"user\", \"content\": prompt}]\r\n        )\r\n\r\n        return response.choices[0].message.content\r\n```\r\n\r\n### 2. AI Agent Development\r\n\r\n```python\r\nclass PythonAIAgent:\r\n    def __init__(self, openai_key):\r\n        openai.api_key = openai_key\r\n        self.tools = {\r\n            \"calculate\": self.calculate,\r\n            \"search_web\": self.search_web,\r\n            \"write_code\": self.write_code,\r\n            \"analyze_data\": self.analyze_data\r\n        }\r\n\r\n    def think_and_act(self, user_request):\r\n        \"\"\"AI agent that thinks and takes actions\"\"\"\r\n        # Step 1: Understand the request\r\n        analysis_prompt = f\"\"\"\r\n        Analyze this user request and determine what tools are needed:\r\n        Request: {user_request}\r\n\r\n        Available tools: {list(self.tools.keys())}\r\n\r\n        Respond with a JSON plan:\r\n        {{\"steps\": [list of tools to use], \"reasoning\": \"explanation\"}}\r\n        \"\"\"\r\n\r\n        # Get AI's plan\r\n        response = openai.ChatCompletion.create(\r\n            model=\"gpt-4\",\r\n            messages=[{\"role\": \"user\", \"content\": analysis_prompt}]\r\n        )\r\n\r\n        # Execute the plan\r\n        plan = response.choices[0].message.content\r\n        print(f\"ü§ñ AI Plan: {plan}\")\r\n\r\n        # This is a simplified version - in practice, you'd parse JSON and execute tools\r\n        return plan\r\n\r\n    def calculate(self, expression):\r\n        \"\"\"Calculate mathematical expressions\"\"\"\r\n        try:\r\n            result = eval(expression)  # Note: Use ast.literal_eval for safety\r\n            return f\"Calculation result: {result}\"\r\n        except Exception as e:\r\n            return f\"Calculation error: {e}\"\r\n\r\n    def search_web(self, query):\r\n        \"\"\"Search the web (simplified)\"\"\"\r\n        return f\"Web search results for: {query}\"\r\n\r\n    def write_code(self, description):\r\n        \"\"\"Generate code based on description\"\"\"\r\n        prompt = f\"Write Python code for: {description}\"\r\n        response = openai.ChatCompletion.create(\r\n            model=\"gpt-4\",\r\n            messages=[{\"role\": \"user\", \"content\": prompt}]\r\n        )\r\n        return response.choices[0].message.content\r\n\r\n    def analyze_data(self, data_description):\r\n        \"\"\"Analyze data\"\"\"\r\n        return f\"Data analysis for: {data_description}\"\r\n```\r\n\r\n## üéØ Real-World AI Applications for 2025\r\n\r\n### Smart Email Assistant\r\n\r\n```python\r\nclass AIEmailAssistant:\r\n    def __init__(self, openai_key):\r\n        openai.api_key = openai_key\r\n\r\n    def classify_email(self, email_content):\r\n        \"\"\"Classify email as spam, important, promotion, etc.\"\"\"\r\n        prompt = f\"\"\"\r\n        Classify this email into one of these categories:\r\n        - important\r\n        - spam\r\n        - promotion\r\n        - personal\r\n        - work\r\n\r\n        Email: {email_content}\r\n\r\n        Respond with just the category name.\r\n        \"\"\"\r\n\r\n        response = openai.ChatCompletion.create(\r\n            model=\"gpt-3.5-turbo\",\r\n            messages=[{\"role\": \"user\", \"content\": prompt}],\r\n            max_tokens=50\r\n        )\r\n\r\n        return response.choices[0].message.content.strip()\r\n\r\n    def generate_reply(self, email_content, tone=\"professional\"):\r\n        \"\"\"Generate email reply\"\"\"\r\n        prompt = f\"\"\"\r\n        Generate a {tone} email reply to:\r\n\r\n        {email_content}\r\n\r\n        Make it concise and appropriate.\r\n        \"\"\"\r\n\r\n        response = openai.ChatCompletion.create(\r\n            model=\"gpt-4\",\r\n            messages=[{\"role\": \"user\", \"content\": prompt}]\r\n        )\r\n\r\n        return response.choices[0].message.content\r\n```\r\n\r\n### AI-Powered Content Creator\r\n\r\n```python\r\nclass AIContentCreator:\r\n    def __init__(self, openai_key):\r\n        openai.api_key = openai_key\r\n\r\n    def create_blog_post(self, topic, target_audience=\"general\"):\r\n        \"\"\"Create a complete blog post\"\"\"\r\n        outline_prompt = f\"\"\"\r\n        Create a detailed outline for a blog post about \"{topic}\"\r\n        for {target_audience} audience.\r\n        Include:\r\n        1. Catchy title\r\n        2. Introduction hook\r\n        3. Main sections (3-5)\r\n        4. Conclusion\r\n        5. Call-to-action\r\n        \"\"\"\r\n\r\n        # Get outline\r\n        outline_response = openai.ChatCompletion.create(\r\n            model=\"gpt-4\",\r\n            messages=[{\"role\": \"user\", \"content\": outline_prompt}]\r\n        )\r\n\r\n        outline = outline_response.choices[0].message.content\r\n\r\n        # Generate full content\r\n        content_prompt = f\"\"\"\r\n        Based on this outline, write a complete blog post:\r\n\r\n        {outline}\r\n\r\n        Make it engaging, informative, and well-structured.\r\n        Include practical examples and actionable tips.\r\n        \"\"\"\r\n\r\n        content_response = openai.ChatCompletion.create(\r\n            model=\"gpt-4\",\r\n            messages=[{\"role\": \"user\", \"content\": content_prompt}],\r\n            max_tokens=2000\r\n        )\r\n\r\n        return {\r\n            \"outline\": outline,\r\n            \"content\": content_response.choices[0].message.content\r\n        }\r\n\r\n    def create_social_media_content(self, topic, platform=\"twitter\"):\r\n        \"\"\"Create platform-specific social media content\"\"\"\r\n        platform_specs = {\r\n            \"twitter\": \"280 characters, hashtags, engaging\",\r\n            \"linkedin\": \"professional tone, industry insights\",\r\n            \"instagram\": \"visual description, trendy hashtags\",\r\n            \"facebook\": \"conversational, community-focused\"\r\n        }\r\n\r\n        spec = platform_specs.get(platform, \"general social media\")\r\n\r\n        prompt = f\"\"\"\r\n        Create {platform} content about \"{topic}\".\r\n\r\n        Platform requirements: {spec}\r\n\r\n        Generate 3 different versions.\r\n        \"\"\"\r\n\r\n        response = openai.ChatCompletion.create(\r\n            model=\"gpt-4\",\r\n            messages=[{\"role\": \"user\", \"content\": prompt}]\r\n        )\r\n\r\n        return response.choices[0].message.content\r\n```\r\n\r\n## üìà Career Opportunities in AI & Python (2025)\r\n\r\n### High-Demand Positions:\r\n\r\n- **AI Engineer**: $80,000 - $150,000\r\n- **Machine Learning Engineer**: $90,000 - $160,000\r\n- **Data Scientist**: $70,000 - $130,000\r\n- **AI Product Manager**: $100,000 - $180,000\r\n- **Computer Vision Engineer**: $85,000 - $155,000\r\n\r\n### Essential Skills for 2025:\r\n\r\n1. **LLM Integration**: OpenAI API, Anthropic, Google AI\r\n2. **Vector Databases**: ChromaDB, Pinecone, Weaviate\r\n3. **AI Frameworks**: LangChain, LlamaIndex, AutoGPT\r\n4. **MLOps**: Docker, Kubernetes, MLflow\r\n5. **Edge AI**: TensorFlow Lite, ONNX, Raspberry Pi\r\n\r\n## üéØ Next Steps: Building Your AI Portfolio\r\n\r\n### Project Ideas for 2025:\r\n\r\n1. **AI-Powered Code Assistant**: Like GitHub Copilot\r\n2. **Smart Document Analyzer**: PDF/Text processing with AI\r\n3. **Voice AI Assistant**: Speech-to-text with AI responses\r\n4. **AI Image Generator**: Using DALL-E or Stable Diffusion APIs\r\n5. **Intelligent Chatbot**: With memory and context\r\n\r\n### Learning Roadmap:\r\n\r\n- **Week 1-2**: Master OpenAI API and basic AI concepts\r\n- **Week 3-4**: Build first AI application (chatbot)\r\n- **Week 5-6**: Learn computer vision with OpenCV\r\n- **Week 7-8**: Explore machine learning with scikit-learn\r\n- **Week 9-12**: Advanced projects and deployment\r\n\r\n## üî• Conclusion\r\n\r\n2025 is the year of AI democratization. With Python and the tools shown in this guide, you can build incredible AI applications that seemed impossible just a few years ago. The key is to start building, experimenting, and learning from real projects.\r\n\r\nRemember: The future belongs to those who can combine domain expertise with AI capabilities. Start your AI journey today with Python!\r\n\r\n---\r\n\r\n_Ready to dive deeper? Join Zumenzu's interactive AI programming challenges and build your AI portfolio with guided projects and real-world applications!_\r\n",
    "category": "Artificial Intelligence",
    "tags": "[\"python\",\"artificial intelligence\",\"machine learning\",\"chatgpt\",\"tensorflow\",\"pytorch\",\"2025\"]",
    "featured": true,
    "readTime": "41 min",
    "estimatedMinutes": 5,
    "author": "Zumenzu AI Team",
    "seoKeywords": null,
    "metaDescription": null,
    "socialImageUrl": null,
    "isPublished": true,
    "publishedAt": "2025-08-10T22:22:52.204Z",
    "language": "tr"
  }
]